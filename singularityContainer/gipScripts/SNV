suppressPackageStartupMessages(library("argparse"))
parser <- ArgumentParser(description="Compare SNVs in multiple samples")
parser$add_argument("--samples" , nargs="+", help="Sample names. It determines the plotting order. If \"NA\" all samples are used" , default="NA")
parser$add_argument("--gipOut"  , help="GIP output directory [default %(default)s]" , default="gipOut")
parser$add_argument("--outName" , help="Output name [default %(default)s]" , default="gipOut/sampleComparison/SNV")
parser$add_argument("--chrs"    , nargs="+" , help="Chromosomes to use. If \"NA\" it uses the same chromsomes as GIP [default %(default)s]" , default="NA")
parser$add_argument("--coordCartesianYlim" , help="Max y-axis value for density plots. If \"NA\" the value is automatically attributed [default %(default)s]" , default="NA")
parser$add_argument("--minVRF" , type="double" , help="Discard SNVs with frequency < --minVRF [default %(default)s]" , default=0)
parser$add_argument("--showCoverage"  , action="store_true" , help="Overlay sequencing coverage" , default=FALSE)
parser$add_argument("--smoothingFactor" , type="double" , help="Merge and average the normalized coverage of this number of adjacent bins. DEPENDENCY --showCoverage [default %(default)s]" , default=30)
parser$add_argument("--maxCov" , type="double" , help="Normalized coverage values > --maxCov are shown as --maxCov. DEPENDENCY --showCoverage [default %(default)s]" , default=5)
parser$add_argument("--debug"  , action="store_true" , help="Dump session and quit" , default=FALSE)
args <- parser$parse_args()
#patch NA
for (n in names(args)){if(args[[n]][1] == "NA"){args[[n]] <- NA}  }
for (n in names(args)){assign(n,args[[n]]) }

suppressPackageStartupMessages(library("data.table"))
suppressPackageStartupMessages(library("ggplot2"))
suppressPackageStartupMessages(library("openxlsx"))
suppressPackageStartupMessages(library("session"))
suppressPackageStartupMessages(library("venn"))
suppressPackageStartupMessages(library("RColorBrewer"))
options(datatable.fread.input.cmd.message=FALSE)
if(debug){save.session("session_DEBUG_SNV");quit()}

#setup
if(! dir.exists(gipOut)){
  stop("ERROR. gipOut directory does not exists")
  quit(save = "no", status = 1, runLast = FALSE)
}
if (is.na(samples[1])) {
  samples <- dir(paste0(gipOut,"/samples"))
} 
outDir <- paste0(gipOut,"/sampleComparison/")
system(paste0("mkdir -p ", outDir))
chrSel      <- as.character(read.table(paste0(gipOut,"/samples/",samples[1],"/chrCoverageMedians_",samples[1]),header=T)[,1])
chrSize     <- read.table(paste0(gipOut,"/genome/genome.chrSize"),sep="\t", stringsAsFactors = F, header=F , col.names=c("chr","size"))
chrSize$chr <- as.character(chrSize$chr)
chrSize     <- chrSize[match(chrSel,chrSize$chr),]
if (is.na (chrs[1])){
  chrs <- chrSize$chr
}
chrSize <- chrSize[chrSize$chr %in% chrs,]

#chr size cumulative sum
chrSizeCumSum <- cumsum(chrSize$size)
v <- c(0,chrSizeCumSum)
chrSizeCumSum <- v[-length(v)]
names(chrSizeCumSum) <- chrSize$chr

#chr mid points
chrMids <- c()
for (i in 1:length(chrSizeCumSum)-1) {chrMids = c(chrMids , (chrSizeCumSum[i] + chrSizeCumSum[i + 1]) / 2)}
chrMids = c(chrMids ,  ( chrSizeCumSum[length(chrSizeCumSum)] + sum(chrSize$size) ) / 2)

smoothing <- function(x){
  compressedL <- list()
  for (chr in unique(x$chromosome)){
    tmpChr <- subset(x, x$chromosome == chr)
    newBins <- ceiling(seq_along(tmpChr$normalizedMeanCoverage)/smoothingFactor)
    a <- sapply(split(tmpChr$normalizedMeanCoverage, newBins),mean)
    b <- sapply(split(tmpChr$mid, newBins),mean)
    compressedL[[chr]] <- data.frame(chromosome = chr, mid=b , normalizedMeanCoverage=a  ,sample=unique(tmpChr$sample) , stringsAsFactors=F)
  }
  return(do.call(rbind,compressedL))
}

###################
#read and reformat#
###################
snvDf <- list()
covPerBinL <- list()
for (s in samples) {
  snvDf[[s]]  <- as.data.frame(fread(cmd=paste0("gunzip -c ", gipOut , "/samples/",s,"/",s,"_freebayesFiltered/singleVariants.df.gz"), header=T) , stringsAsFactors=FALSE)
  row.names(snvDf[[s]]) <- paste(snvDf[[s]]$chr , snvDf[[s]]$position , sep="_")
  snvDf[[s]]$tag    <- paste(snvDf[[s]]$chr , snvDf[[s]]$position , snvDf[[s]]$ref_alt ,sep="_")
  #filter VRF
  snvDf[[s]] <- snvDf[[s]][ snvDf[[s]]$freq >= minVRF , ]
  snvDf[[s]]$sample <- s
  #covPerBin
  if(showCoverage){
    covPerBinL[[s]] <- fread(cmd=paste0("gunzip -c ", gipOut , "/samples/",s,"/",s,".covPerBin.gz"), header=T,data.table=FALSE) 
    covPerBinL[[s]]$normalizedMeanCoverage <- (covPerBinL[[s]]$meanCoverage / median(covPerBinL[[s]]$meanCoverage)) *2
    covPerBinL[[s]]$sample <- s
    covPerBinL[[s]]$mid <- covPerBinL[[s]]$start + ((covPerBinL[[s]]$end - covPerBinL[[s]]$start) /2)
    if(smoothingFactor > 1){
      covPerBinL[[s]] <- smoothing( covPerBinL[[s]])
    }
    covPerBinL[[s]]$normalizedMeanCoverage[covPerBinL[[s]]$normalizedMeanCoverage > maxCov] = maxCov
  }
}
df <- do.call(rbind,snvDf)
covPerBin <- do.call(rbind,covPerBinL)



#PLOT
theme_gip <- function(){     
    theme_bw() %+replace%    
    theme(axis.text.x  = element_text(angle = 90), 
      axis.text.y  = element_text(size = 14) , 
      axis.title   = element_text(size=14,face="bold"),
      legend.title = element_text(face = "bold", size = 14),
      legend.text  = element_text(size = 12))
}
pal <- colorRampPalette(brewer.pal(8, "Dark2"))(length(samples))
names(pal) <- samples
pdf(paste0(outName,".density.pdf"),height=10, width=12 )
#density plots
p <- ggplot(df, aes(freq, colour = sample)) + geom_density() + theme_bw() + facet_wrap(~chr,scales="free_y") 
p <- p + xlab("Variant frequency") + ylab("Density") +coord_cartesian(xlim=c(0,1)) + scale_color_manual(values=pal,name="Sample") 
p <- p + theme_gip() + theme(legend.position="bottom") 
if(! is.na(coordCartesianYlim)) { 
  p <- p + coord_cartesian(ylim=c(0,as.numeric(coordCartesianYlim)))
}
print (p)
invisible(dev.off())

#tot SNV per chr (sorted by chr size)
pdf(paste0(outName,".count.pdf"))
chrNamesSortedByRealSize <- chrSize[with(chrSize, order(size)), "chr"]
df$chr <- factor(df$chr,levels=chrNamesSortedByRealSize)
p <- ggplot(df, aes(chr, fill = sample)) + geom_bar(stat="count") 
p <- p + xlab("Chromosome") + ylab("Number of SNV") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_fill_manual(values=pal,name="Sample") + theme_gip() 
print(p)
invisible(dev.off())

#position/VRF: genome overview
pdf(paste0(outName,".overview.pdf"),height=10, width=20)
positionCorrection <- chrSizeCumSum[match(df$chr, names(chrSizeCumSum))]
df$startFixed <- df$position + positionCorrection
p <- ggplot(df, aes(startFixed,freq)) 
p <- p + scale_x_continuous(breaks=chrMids, labels=chrs , lim=c(0 , sum(chrSize$size)),expand = c(0,0))
p <- p + geom_point(aes(colour=(sample)),alpha=0.5) + theme_gip() +  ylab("Variant frequency") 
p <- p + expand_limits(y = 0) + xlab("Chromosome") 
p <- p + geom_vline(xintercept = chrSizeCumSum[-1]) 
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position="bottom" , panel.grid.major.x = element_blank()) 
p <- p + scale_color_manual(values=pal,name="Sample") 
print(p)
invisible(dev.off())

#position/VRF: faceting
#prepare df with x and y axes range
axesDf <- data.frame(x = numeric(), y = numeric(), chr = character())
for (chr in chrSize$chr){ 
 size <- chrSize[ match(chr , chrSize$chr) , "size" ]
 axesDf <- rbind(axesDf, data.frame(x = 0    , y = 0, chr = chr))
 axesDf <- rbind(axesDf, data.frame(x = size , y = 1, chr = chr))
}
pdf(paste0(outName,".multipanel.pdf"),height=10, width=15)
p <- ggplot() + geom_point(data=df , aes(x=position, y=freq , colour=sample),alpha=0.5) 
p <- p + geom_blank(data = axesDf, aes(x = x, y = y)) 
p <- p + facet_wrap(~chr, scales = "free") + xlab("Position") + ylab("Variant frequency") 
p <- p + theme_gip() 
p <- p + scale_color_manual(values=pal,name="Sample") + scale_x_continuous(labels = function(x) format(x, scientific = FALSE , big.mark = " "))
print(p)
invisible(dev.off())

#position/VRF: separate plots
pdf(paste0(outName,".byChr.pdf"),width=10)
for (chr in chrs){
  p <- ggplot(df [df$chr == chr,], aes(position,freq)) + coord_cartesian(xlim=c(0 , chrSize[chrSize$chr == chr, "size"])) 
  if(showCoverage){
      p <- p + geom_line(data=covPerBin[covPerBin$chromosome == chr,], aes(y=normalizedMeanCoverage / maxCov , 
      x=mid , color=sample), size=.5 )
    p <- p + scale_y_continuous(sec.axis = sec_axis(~ . * maxCov, name="Coverage"))
  }
  p <- p + geom_point(aes(colour=(sample)),alpha=1) 
  p <- p + theme_gip() + ggtitle(paste("chromosome",chr)) 
  p <- p + ylab("Variant frequency") + xlab("Position") + scale_color_manual(values=pal,name="Sample") + expand_limits(y = 0)
  p <- p + scale_x_continuous(labels = function(x) format(x, scientific = FALSE , big.mark = " "))
  print(p)
}
invisible(dev.off())

#Allele specific plots (VRF/VRF plot and Venn plot)
#i.e. SNVs at the same position in different samples are considerent different if the alternative (ALT) nucleotide is different (1_2000_A_T != 1_2000_A_C)
#VRF/VRF scatter plots. 
pdf(paste0(outName,".pairwise.pdf"),width=10)
unionPositions = unique(df$tag)
VRFs = lapply(snvDf, function(x, unionPos){
        sampleVRF = rep(0, length(unionPos))
        sampleVRF[match(x$tag, unionPos)] = x$freq
        return(sampleVRF)
}, unionPositions)
VRFmat = do.call(cbind, VRFs)
row.names(VRFmat) <- unionPositions
pairs(VRFmat , upper.panel = NULL , pch=19 , cex=0.5,main="SNVs union")
VRFmatIntersect <- VRFmat [ apply(VRFmat,1,function(x){!any(x==0) } ) , ]
pairs(VRFmatIntersect , upper.panel = NULL , pch=19 , cex=0.5,main="SNVs intersection")
invisible(dev.off())

#Venn
if (length(samples) <=7){
  tagL <- list()
  for (s in samples){
    tagL[[s]] <- snvDf[[s]]$tag
  }
  cols <- c()
  #if < 3 samples brew.pal does not work and you need to pass colors manually
  if (length(samples) == 2) {
    cols = c('#e41a1c' , '#377eb8')
  } else {
    cols = brewer.pal(length(samples), "Set1")
  }
  pdf(paste0(outName,".venn.pdf"))
  venn(tagL , ilabels = TRUE, cexil=1.1 , cexsn = 1.3 , zcolor=cols)
  invisible(dev.off())
} else{
	print("Warning: Specify max 7 samples to produce Venn diagrams")
}

#out table
VRFmat <- as.data.frame(VRFmat)
funIndx <- unique(df[,c("tag","EFF","gene_annotation")])
VRFmat$EFF <- funIndx [ match(row.names(VRFmat) , funIndx$tag) , c("EFF") ]
VRFmat$gene_annotation <- funIndx [ match(row.names(VRFmat) , funIndx$tag) , c("gene_annotation") ]
VRFmat$SNV <- row.names(VRFmat)
VRFmat <- VRFmat[,c(ncol(VRFmat),1:(ncol(VRFmat)-1)) ]
for(i in 2:(length(samples)+1)){
  names(VRFmat)[i] <- paste0("frequency_",names(VRFmat)[i])
}
VRFmat$gene_annotation[is.na(VRFmat$gene_annotation)] = "NA"
write.xlsx(file=paste0(outName,".xlsx") , x=VRFmat , asTable=TRUE)


