suppressPackageStartupMessages(library("argparse"))
parser <- ArgumentParser(description="Compare bin sequencing coverage in 2 samples")
parser$add_argument("--samples" , nargs="+", required=TRUE, help="Sample names. It determines the plotting order [default %(default)s]" )
parser$add_argument("--gipOut"  , required=TRUE , help="GIP output directory [default %(default)s]" , default="NA")
parser$add_argument("--outName" , help="Output name [default %(default)s]" , default="NA")
parser$add_argument("--chrs"    , nargs="+" , help="chromosomes to use. If not defined, it considers the chromosomes selected at gip runtime [default %(default)s]" , default="NA")
parser$add_argument("--MAPQ"  , type="integer" , help="points with MAPQ < --MAPQ will be labeled [default %(default)s]" , default="-1")
parser$add_argument("--ylim" , type="double" , help="graphical parameter.values > ylim will be replaced with ylim in the plot (while they will be unaltered in the output dataframe) [default %(default)s]" , default="3")
parser$add_argument("--highLowRatio" , nargs="+" , type="character" , help="Provide two numbers. Bins > num1 or < num2 will be colored differently (e.g. 1.5 0.5) [default %(default)s]" , default= "NA" )
parser$add_argument("--pseudocount" , type="double" , help="value to add to the normalized median coverage. Avoid infinite (1/0) and NaN (0/0) ratio values [default %(default)s]" , default=0.1)
parser$add_argument("--debug"  , action="store_true" , help="dump session and quit [default %(default)s]" , default=FALSE)
args <- parser$parse_args()
#patch NA
for (n in names(args)){if(args[[n]][1] == "NA"){args[[n]] <- NA}  }
for (n in names(args)){assign(n,args[[n]]) }

suppressPackageStartupMessages(library("data.table"))
suppressPackageStartupMessages(library("ggplot2"))
suppressPackageStartupMessages(library("openxlsx"))
suppressPackageStartupMessages(library("session"))
options(datatable.fread.input.cmd.message=FALSE)
if(debug){save.session("session_DEBUG_binCNV");quit()}

#setup
outDir <- paste0(gipOut,"/sampleComparison/")
system(paste0("mkdir -p ", outDir))
if (is.na(outName)){
  outName <- paste0(outDir,"binCNV")
}
s1=samples[1]
s2=samples[2]
chrSel      <- as.character(read.table(paste0(gipOut,"/samples/",s1,"/chrCoverageMedians_",s1),header=T)[,1])
chrSize     <- read.table(paste0(gipOut,"/genome/genome.chrSize"),sep="\t", stringsAsFactors = F, header=F , col.names=c("chr","size"))
chrSize$chr <- as.character(chrSize$chr)
chrSize     <- chrSize[match(chrSel,chrSize$chr),]
if (is.na (chrs[1])){
  chrs <- chrSize$chr
}
chrSize <- chrSize[chrSize$chr %in% chrs,]


#chr size cumulative sum
chrSizeCumSum <- cumsum(chrSize$size)
v <- c(0,chrSizeCumSum)
chrSizeCumSum <- v[-length(v)]
names(chrSizeCumSum) <- chrSize$chr

#chr mid points
chrMids <- c()
for (i in 1:length(chrSizeCumSum)-1) {chrMids = c(chrMids , (chrSizeCumSum[i] + chrSizeCumSum[i + 1]) / 2)}
chrMids =c(chrMids ,  ( chrSizeCumSum[length(chrSizeCumSum)] + sum(chrSize$size) ) / 2)

###################
#read and reformat#
###################
readSample <- function(id) {
#read covPerBins
df  <- fread(cmd=paste0("gunzip -c ", gipOut , "/samples/",id,"/",id,".covPerBin.gz"), stringsAsFactors=FALSE , header=T)
names(df) <- c("chromosome","start","end","meanCoverage","medianCoverage","MAPQ")
df      <- as.data.frame(df , stringsAsFactors = FALSE)
row.names(df) <- paste(df$chromosome, df$start, df$end , sep="_")
df$chromosome <- as.character(df$chromosome)

#filter
df <- df[df$chromosome %in% chrs, ]

#reformat
newDf<-NULL
for (chr in chrs){rbind(newDf,df[df$chromosome == chr,]) -> newDf};
df <- newDf
df$binMidPoint <- (df$start) + (((df$end - df$start)+1) /2)
df$meanCoverage <- NULL

#pseudocount
df$medianCoverage <- df$medianCoverage + pseudocount
return(df)
}
sampDf <- list()
sampDf[[ s1 ]] <- readSample(s1)
sampDf[[ s2 ]] <- readSample(s2)


################
#RATIO DF (rdf)#
################
rdf       <- sampDf[[ s1 ]] [, c( "chromosome" , "start" , "end" , "binMidPoint")]
rdf$ratio <- sampDf[[s1]]$medianCoverage / sampDf[[s2]][ row.names(sampDf[[s1]]), "medianCoverage" ]
rdf$MAPQ  <- pmin( sampDf[[s1]]$MAPQ , sampDf[[s2]][ row.names(sampDf[[s1]]), "MAPQ" ] ) 
#color extreme bins
rdf$color  <- "black"
rdf$status <- "background"
if (! is.na(highLowRatio[1])){
  highLowRatio <- as.numeric(highLowRatio)
  rdf$color[rdf$ratio > highLowRatio[1]] = "orange"
  rdf$color[rdf$ratio < highLowRatio[2]] = "blue"
  rdf$status[rdf$ratio > highLowRatio[1]]="enriched"
  rdf$status[rdf$ratio < highLowRatio[2]]="depleted"
}
rdf[rdf$MAPQ < MAPQ , "status"] = "lowMAPQ"
rdf[rdf$MAPQ < MAPQ , "color"]  = "gray"

######
#plot#
######
#all together
dfAll <- data.frame(chromosome=rdf$chromosome , start=rdf$start , ratio=rdf$ratio , color=rdf$color, stringsAsFactors=F)
dfAll$ratio[dfAll$ratio > ylim] = ylim
positionCorrection <- chrSizeCumSum[match(dfAll$chromosome, names(chrSizeCumSum))]
dfAll$startFixed <- dfAll$start + positionCorrection
pdf(paste0(outName,".overview.pdf"),height=10, width=20) 
plot(x=dfAll$startFixed , y=dfAll$ratio , xlab="chromosomes" , ylab="genomic bin sequencing coverage ratio", col=dfAll$color , xaxt = 'n', xaxs="i" , yaxs="i" , font=2 , pch=19)
segments(x0=0 , y0=1.5 , x1=sum(chrSize$size) , y1=1.5 , lty=3, col='red', lwd=1)
segments(x0=0 , y0=1   , x1=sum(chrSize$size) , y1=1 , lty=2, col='black', lwd=1)
segments(x0=0 , y0=0.5 , x1=sum(chrSize$size) , y1=0.5 , lty=3, col='red', lwd=1)
abline(v=chrSizeCumSum[-1], lty=1, col='gray', lwd=2)
axis(1, at=chrMids, labels=names(chrMids) , font=2)
invisible(dev.off())

#factorize for ggplot
rdf$chromosome <- factor(rdf$chromosome , levels=chrs)

#plot by chromosome
pdf(paste0(outName,".byChr.pdf")) 
for (chr in chrs){
  dfChr <- subset(rdf,chromosome == chr)
  dfChr$ratio[dfChr$ratio > ylim]=ylim
  p <- ggplot(dfChr, aes(binMidPoint,ratio)) + geom_point(colour="grey50", size = 2, alpha = 0.1) + coord_cartesian(ylim =c(0,ylim)) + theme(legend.position="none") + xlab("genomic bin position") + ggtitle(paste("chromosome",chr)) + theme_bw() + ylab("genomic bin sequencing coverage ratio")
  p <- p + geom_point(size=1.5,alpha = 0.3,aes(colour=status)) + scale_colour_manual(values = c("background" = "black","amplified" = "orange","depleted" = "blue","lowMAPQ" = "gray"),name="copy number")
  print(p)
}
invisible(dev.off())

#plot faceting
pdf(paste0(outName,".multiPanel.pdf"),height=10, width=20)
dfFaceting <- rdf
dfFaceting$ratio[dfFaceting$ratio > ylim]=ylim
p <- ggplot(dfFaceting, aes(binMidPoint,ratio)) + geom_point(colour="grey50", size = 1, alpha = 0.1) + facet_wrap(~ chromosome,nrow=4,scales="free") + coord_cartesian(ylim =c(0,ylim)) + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab("genomic bin position") + ylab("genomic bin sequencing coverage ratio") + scale_x_continuous(labels = function(x) format(x, scientific = FALSE))
p = p + geom_point(size=0.5,alpha=0.5,aes(colour=status)) + scale_colour_manual(values = c("background" = "black","amplified" = "orange","depleted" = "blue","lowMAPQ" = "gray"),name="copy number")
print(p)
invisible(dev.off())

rdf$binMidPoint <- NULL
write.xlsx(file=paste0(outName,".xlsx") , x=rdf , asTable=TRUE)



