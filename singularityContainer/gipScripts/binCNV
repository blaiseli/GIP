#############################################################################
# giptools                                                                  #
#                                                                           #
# Authors: Giovanni Bussotti                                                #
# Copyright (c) 2021  Institut Pasteur                                      #
#                                                                           #
#                                                                           #
# This program is free software: you can redistribute it and/or modify      #
# it under the terms of the GNU General Public License as                   #
# published by the Free Software Foundation, either version 3 of the        #
# License, or (at your option) any later version.                           #
#                                                                           #
# This program is distributed in the hope that it will be useful,           #
# but WITHOUT ANY WARRANTY; without even the implied warranty of            #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             #
# GNU General Public License for more details.                              #
#                                                                           #
# You should have received a copy of the GNU General Public License         #
# along with this program.  If not, see <https://www.gnu.org/licenses/>.    #
#                                                                           #
#############################################################################

suppressPackageStartupMessages(library("argparse"))
parser <- ArgumentParser(description="Compare bin sequencing coverage in 2 samples")
parser$add_argument("--samples" , nargs="+", required=TRUE, help="Sample names. It determines the plotting order [required]" )
parser$add_argument("--gipOut"  , help="GIP output directory [default %(default)s]" , default="gipOut")
parser$add_argument("--outName" , help="Output name [default %(default)s]" , default="gipOut/sampleComparison/binCNV")
parser$add_argument("--chrs"    , nargs="+" , help="Chromosomes to use. If \"NA\" it uses the same chromsomes as GIP [default %(default)s]" , default="NA")
parser$add_argument("--MAPQ"  , type="integer" , help="Label bins with MAPQ < --MAPQ [default %(default)s]" , default=0)
parser$add_argument("--ylim" , type="double" , help="Plot visualization threshold. Bin ratio values greather than this threshold are shown as --ylim [default %(default)s]" , default="3")
parser$add_argument("--highLowRatio" , nargs="+" , type="double" , help="Provide 2 numbers. Bins with ratio scores > num1 or < num2 will be colored differently [default %(default)s]" , default= c(1.5,0.5) )
parser$add_argument("--pseudocount" , type="double" , help="Normalized mean coverage pseudocount value preventing infinite (1/0) and NaN (0/0) ratio values [default %(default)s]" , default=0.1)
parser$add_argument("--debug"  , action="store_true" , help="Dump session and quit" , default=FALSE)
args <- parser$parse_args()
#patch NA
for (n in names(args)){if(args[[n]][1] == "NA"){args[[n]] <- NA}  }
for (n in names(args)){assign(n,args[[n]]) }

suppressPackageStartupMessages(library("data.table"))
suppressPackageStartupMessages(library("ggplot2"))
suppressPackageStartupMessages(library("openxlsx"))
suppressPackageStartupMessages(library("session"))
options(datatable.fread.input.cmd.message=FALSE)
if(debug){save.session("session_DEBUG_binCNV");quit()}

#setup
if(! dir.exists(gipOut)){
  stop("ERROR. gipOut directory does not exists")
  quit(save = "no", status = 1, runLast = FALSE)
}
outDir <- paste0(gipOut,"/sampleComparison/")
system(paste0("mkdir -p ", outDir))
s1=samples[1]
s2=samples[2]
chrSel      <- as.character(read.table(paste0(gipOut,"/samples/",s1,"/chrCoverageMedians_",s1),header=T)[,1])
chrSize     <- read.table(paste0(gipOut,"/genome/genome.chrSize"),sep="\t", stringsAsFactors = F, header=F , col.names=c("chr","size"))
chrSize$chr <- as.character(chrSize$chr)
chrSize     <- chrSize[match(chrSel,chrSize$chr),]
if (is.na (chrs[1])){
  chrs <- chrSize$chr
}
chrSize <- chrSize[chrSize$chr %in% chrs,]


#chr size cumulative sum
chrSizeCumSum <- cumsum(as.numeric(chrSize$size))
v <- c(0,chrSizeCumSum)
chrSizeCumSum <- v[-length(v)]
names(chrSizeCumSum) <- chrSize$chr

#chr mid points
chrMids <- c()
for (i in 1:length(chrSizeCumSum)-1) {chrMids = c(chrMids , (chrSizeCumSum[i] + chrSizeCumSum[i + 1]) / 2)}
chrMids =c(chrMids ,  ( chrSizeCumSum[length(chrSizeCumSum)] + sum(chrSize$size) ) / 2)

###################
#read and reformat#
###################
readSample <- function(id) {
#read covPerBins
df  <- fread(cmd=paste0("gunzip -c ", gipOut , "/samples/",id,"/",id,".covPerBin.gz"), stringsAsFactors=FALSE , header=T)
names(df) <- c("chromosome","start","end","meanCoverage","normalizedMeanCoverage","MAPQ")
df      <- as.data.frame(df , stringsAsFactors = FALSE)
row.names(df) <- paste(df$chromosome, df$start, df$end , sep="_")
df$chromosome <- as.character(df$chromosome)

#filter
df <- df[df$chromosome %in% chrs, ]

#reformat
newDf<-NULL
for (chr in chrs){rbind(newDf,df[df$chromosome == chr,]) -> newDf};
df <- newDf
df$binMidPoint <- (df$start) + (((df$end - df$start)+1) /2)
df$meanCoverage <- NULL

#pseudocount
df$normalizedMeanCoverage <- df$normalizedMeanCoverage + pseudocount
return(df)
}
sampDf <- list()
sampDf[[ s1 ]] <- readSample(s1)
sampDf[[ s2 ]] <- readSample(s2)


################
#RATIO DF (rdf)#
################
rdf       <- sampDf[[ s1 ]] [, c( "chromosome" , "start" , "end" , "binMidPoint")]
rdf$ratio <- sampDf[[s1]]$normalizedMeanCoverage / sampDf[[s2]][ row.names(sampDf[[s1]]), "normalizedMeanCoverage" ]
rdf$MAPQ  <- pmin( sampDf[[s1]]$MAPQ , sampDf[[s2]][ row.names(sampDf[[s1]]), "MAPQ" ] ) 
#color extreme bins
rdf$color  <- "black"
rdf$status <- "background"
rdf$color[rdf$ratio > highLowRatio[1]]  = "orange"
rdf$color[rdf$ratio < highLowRatio[2]]  = "blue"
rdf$status[rdf$ratio > highLowRatio[1]] = "amplified"
rdf$status[rdf$ratio < highLowRatio[2]] = "depleted"
rdf[rdf$MAPQ < MAPQ , "status"] = "lowMAPQ"
rdf[rdf$MAPQ < MAPQ , "color"]  = "gray"

######
#plot#
######
theme_gip <- function(){     
    theme_bw() %+replace%    
    theme(axis.text.x  = element_text(angle = 90), 
      axis.text.y  = element_text(size = 14) , 
      axis.title   = element_text(size=14,face="bold"),
      legend.title = element_text(face = "bold", size = 14),
      legend.text  = element_text(size = 12))
}

#all together
rdf$saturatedRatio <- rdf$ratio
rdf$saturatedRatio[rdf$saturatedRatio > ylim] = ylim
positionCorrection <- chrSizeCumSum[match(rdf$chromosome, names(chrSizeCumSum))]
rdf$startFixed <- rdf$start + positionCorrection
chrSegments <- data.frame(x=chrSizeCumSum[-1],y=ylim,zero=0)
pdf(paste0(outName,".overview.pdf") ,height=10, width=20) 
p <- ggplot(rdf, aes(startFixed,saturatedRatio)) 
p <- p + geom_segment(aes(x = 0, y = highLowRatio[1], xend = sum(chrSize$size), yend = highLowRatio[1]), linetype="dashed", color = "red", size=.3)
p <- p + geom_segment(aes(x = 0, y = highLowRatio[2], xend = sum(chrSize$size), yend = highLowRatio[2]), linetype="dashed", color = "red", size=.3)
p <- p + coord_cartesian(ylim =c(0,ylim)) + xlab("genomic bin position")  
p <- p + ylab("genomic bin sequencing coverage ratio") 
p <- p + geom_point(size=1.5,aes(colour=status)) 
p <- p + scale_colour_manual(values = c("background" = "black","amplified" = "orange","depleted" = "blue","lowMAPQ" = "gray"),name="copy number")
p <- p + geom_segment(aes(x = x, y = zero, xend = x, yend = y), color = "gray", size=.5, data=chrSegments)
p <- p + scale_x_continuous(breaks = chrMids) 
p <- p + theme_gip() + theme(panel.grid.major.x = element_blank())
print(p)
invisible(dev.off())

#factorize for ggplot
rdf$chromosome <- factor(rdf$chromosome , levels=chrs)

#plot by chromosome
pdf(paste0(outName,".byChr.pdf")) 
for (chr in chrs){
  dfChr <- subset(rdf,chromosome == chr)
  dfChr$ratio[dfChr$ratio > ylim]=ylim
  p <- ggplot(dfChr, aes(binMidPoint,ratio)) 
  p <- p + geom_segment(aes(x = 0, y = highLowRatio[1], xend = chrSize[chrSize$chr == chr,"size"], yend = highLowRatio[1]), linetype="dashed", color = "red", size=.3)
  p <- p + geom_segment(aes(x = 0, y = highLowRatio[2], xend = chrSize[chrSize$chr == chr,"size"], yend = highLowRatio[2]), linetype="dashed", color = "red", size=.3)
  p <- p + coord_cartesian(ylim =c(0,ylim),xlim=c(0,chrSize[chrSize$chr == chr,"size"])) + xlab("genomic bin position")
  p <- p + ggtitle(paste("chromosome",chr)) + ylab("genomic bin sequencing coverage ratio")
  p <- p + geom_point(size=1.5,alpha = 0.6,aes(colour=status))
  p <- p + scale_colour_manual(values = c("background" = "black","amplified" = "orange","depleted" = "blue","lowMAPQ" = "gray"),name="copy number")
  p <- p + scale_x_continuous(labels = function(x) format(x, scientific = FALSE , big.mark = " ")) + theme_gip()
  print(p)
}
invisible(dev.off())

#plot faceting
#df with x and y axes range
axesDf <- data.frame(x = numeric(), y = numeric(), chromosome = character())
for (chr in chrSize$chr){
  size <- chrSize[ match(chr , chrSize$chr) , "size" ]
  axesDf <- rbind(axesDf, data.frame(x = 0    , y = 0, chromosome = chr))
  axesDf <- rbind(axesDf, data.frame(x = size , y = ylim, chromosome = chr))
}
axesDf$chromosome <- factor(axesDf$chromosome)
pdf(paste0(outName,".multiPanel.pdf"),height=10, width=20)
chrSize$chromosome <- factor(chrSize$chr)
p <- ggplot(rdf, aes(binMidPoint,saturatedRatio))  
p <- p + geom_segment(aes(x = 0, y = highLowRatio[1], xend = size, yend = highLowRatio[1]), linetype="dashed", color = "red", size=.3, data=chrSize)
p <- p + geom_segment(aes(x = 0, y = highLowRatio[2], xend = size, yend = highLowRatio[2]), linetype="dashed", color = "red", size=.3, data=chrSize)
p <- p + geom_point(size=0.5,alpha=0.5,aes(colour=status)) 
p <- p + geom_blank(data = axesDf, aes(x = x, y = y))
p <- p + facet_wrap(~ chromosome,nrow=4,scales="free") + xlab("genomic bin position") 
p <- p + ylab("genomic bin sequencing coverage ratio") + scale_x_continuous(labels = function(x) format(x, scientific = FALSE , big.mark = " "))
p <- p + scale_colour_manual(values = c("background" = "black","amplified" = "orange","depleted" = "blue","lowMAPQ" = "gray"),name="copy number")
p <- p + theme_gip()
print(p)
invisible(dev.off())

rdf[,c("startFixed" , "saturatedRatio" , "binMidPoint")] <- list(NULL)
write.xlsx(file=paste0(outName,".xlsx") , x=rdf , asTable=TRUE)



