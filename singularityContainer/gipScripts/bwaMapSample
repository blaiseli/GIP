#!/bin/bash
#The script maps the reads and mark duplicates
#reads realignment is not needed since it is operated by freebayes by default (which is also a haplotype caller, so less affected by the aliment of individual positions)
########
#INPUTS#
########
#S is the sample name (mates will be created by adding "_X.fastq.gz")
#ASSEMBLY is the genome assembly (multi fasta file with chromosomes)
#C is the number of CPUs
#INDEX is the folder holding the BWA indexes
#O out dir
#delDup [true|false] whether to delete marked duplicates
#P1/P2. Specify the name of the two FASTQ faile pairs. Recommended as the FASTQ paired files can have weird names.

S=$1
ASSEMBLY=$2
C=$3
INDEX=$4
O=$5
delDup=$6
P1=$7
P2=$8

echo "##PROG $S"
echo "##PROG map"
if [ -z $P2 ]; then
    bwa mem -R "@RG\tID:${S}\tSM:${S}" -M -t $C ${INDEX}/db $P1 > ${O}/${S}.sam
else
    bwa mem -R "@RG\tID:${S}\tSM:${S}" -M -t $C ${INDEX}/db $P1 $P2 > ${O}/${S}.sam
fi
echo "##PROG fixmate"
samtools fixmate -O bam ${O}/${S}.sam ${O}/${S}_fixmate.bam
echo "##PROG sort"
samtools sort -O bam -o ${O}/${S}.bam -T ${O}/__tmpGio${S}__ ${O}/${S}_fixmate.bam
samtools index ${O}/${S}.bam
echo "##PROG Markduplicated"
java -jar /bin/picard.jar MarkDuplicates INPUT=${O}/${S}.bam OUTPUT=${O}/${S}_realignedMarkDup.bam VALIDATION_STRINGENCY=LENIENT M=${O}/${S}.MarkDup.log TMP_DIR=${O}/${S}_MarkDuplicatesTMPDIR REMOVE_DUPLICATES=${delDup}
rm -rf ${O}/${S}.sam ${O}/${S}_fixmate.bam ${O}/${S}.intervals ${O}/${S}.bam ${O}/${S}.bam.bai ${O}/${S}_realigned.bam ${O}/${S}_realigned.bai ${O}/${S}_MarkDuplicatesTMPDIR
mv ${O}/${S}_realignedMarkDup.bam ${O}/${S}.bam
samtools index ${O}/${S}.bam    


