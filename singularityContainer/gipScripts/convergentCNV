#############################################################################
# giptools                                                                  #
#                                                                           #
# Authors: Giovanni Bussotti                                                #
# Copyright (c) 2021  Institut Pasteur                                      #
#                                                                           #
#                                                                           #
# This program is free software: you can redistribute it and/or modify      #
# it under the terms of the GNU General Public License as                   #
# published by the Free Software Foundation, either version 3 of the        #
# License, or (at your option) any later version.                           #
#                                                                           #
# This program is distributed in the hope that it will be useful,           #
# but WITHOUT ANY WARRANTY; without even the implied warranty of            #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             #
# GNU General Public License for more details.                              #
#                                                                           #
# You should have received a copy of the GNU General Public License         #
# along with this program.  If not, see <https://www.gnu.org/licenses/>.    #
#                                                                           #
#############################################################################

suppressPackageStartupMessages(library("argparse"))
parser<- ArgumentParser(description= "Detect convergent CNV gene amplifications")
parser$add_argument("--gipOut"  , help="GIP output directory [default %(default)s]" , default="gipOut")
parser$add_argument("--outName" , help="Output name [default %(default)s]" , default="gipOut/sampleComparison/convergentCNV")
parser$add_argument("--newickTree" , help="Newick tree file produced with the phylogeny module [default %(default)s]" , default="gipOut/sampleComparison/phylogeny.treefile")
parser$add_argument("--geCNV"   , help="Gene CNV excel file produced with the geInteraction module [default %(default)s]" , default="gipOut/sampleComparison/geInteraction.CNV.xlsx")
parser$add_argument("--ampThresh" , type="double" , help="Gene normalized coverage amplification threshold [default %(default)s]" , default=1.5)
parser$add_argument("--notAmpThresh" , type="double", help="Gene normalized coverage threshold below which the gene is considered as not amplified [default %(default)s]" , default=1)
parser$add_argument("--covSaturation" , type="double" , help="Gene normalized coverage saturation value. [default %(default)s]" , default=2)
parser$add_argument("--treeTip" , help="Color tree tip by this feature. If \"NA\" tree tips are not colored [default %(default)s]" , default="NA")
parser$add_argument("--tipLab"  , action="store_true" , help="Show sample names on the tree tips" , default=FALSE)
parser$add_argument("--hexpand" , type="double" , help="Avoid truncating tip labels expanding the plot panel by a ratio of the x axis range [default %(default)s]" , default=0)
parser$add_argument("--branchLen"   , help="Branch length ggtree parameter [branch.length|none] [default %(default)s]" , default="none")
parser$add_argument("--layout"   , help="Layout ggtree parameter [rectangular|slanted|circular|fan|daylight] [default %(default)s]" , default="rectangular")
parser$add_argument("--hideHeatmap"  , action="store_true" , help="Do not display the heatmap" , default=FALSE)
parser$add_argument("--heatCols"  , nargs="+" , help="Heatmap gradient colors [default %(default)s]" , default=c("black","blue","white","red3","red"))
parser$add_argument("--heatMin"  , type="double" , help="Heatmap minimum normalized coverage value [default %(default)s]" , default=0)
parser$add_argument("--hideXlabs"  , action="store_true" , help="Do not display x-axis text" , default=FALSE)
parser$add_argument("--plotDim" , nargs="+", type="double", help="File height and width values [default %(default)s]" , default=c(6,7) )
parser$add_argument("--debug"  , action="store_true" , help="Dump session and quit" , default=FALSE)
args <- parser$parse_args()
for (n in names(args)){if(args[[n]][1] == "NA"){args[[n]] <- NA}  }
for (n in names(args)){assign(n,args[[n]]) }

suppressPackageStartupMessages(library("openxlsx"))
suppressPackageStartupMessages(library("ggtree"))
suppressPackageStartupMessages(library("ape"))
suppressPackageStartupMessages(library("ggplot2"))
if(debug){library(session); save.session("session_DEBUG_convergentCNV");quit()}

#setup
if (is.na(gipOut)){
  gipOut <- "./gipOut"
}
if(! dir.exists(gipOut)){
  stop("ERROR. gipOut directory does not exists")
  quit(save = "no", status = 1, runLast = FALSE)
}
distMat <- paste0(newickTree,".distMat.gz")
if(! file.exists(newickTree) | ! file.exists(distMat)) {
  stop("ERROR. newickTree or distance matrix missing. Please run the phylogeny module first")
  quit(save = "no", status = 1, runLast = FALSE)
}
if(! file.exists(geCNV)){
  stop("ERROR. geCNV file does not exists. Please run the geInteraction module first")
  quit(save = "no", status = 1, runLast = FALSE)
}
outDir <- paste0(gipOut,"/sampleComparison/")
system(paste0("mkdir -p ", outDir))
if (is.na(outName)){
  outName <- paste0(outDir,"convergentCNV")
}


#read
treeSNV    <- read.tree(newickTree)
treeSNV    <- drop.tip(treeSNV,"reference")
SNVdistMat <- read.table(distMat,header=T,stringsAsFactors=F,check.names=F)
SNVdistMat <- as.matrix(SNVdistMat[treeSNV$tip.label,treeSNV$tip.label])
geneCNV  <- read.xlsx(geCNV,sheet="normGeneCoverage")
row.names(geneCNV) <- geneCNV$gene_id

#selecting the samples that are the same between the tree and the gene CNV file
geneCNVdf <- geneCNV[,colnames(SNVdistMat),]

#foreach CNV select samples showing amplification (wrt to the reference)
ampSamps <- apply( geneCNVdf , 1 ,function(x){ names(geneCNVdf)[x>=ampThresh] } )

#foreach CNV amplified in at least 2 samples, find the samples pair with max SNV distance
maxDistSampList <- lapply(ampSamps,function(x){
  if(length(x) > 1){
    combosMat           <- combn(x,m=2)
    combosDist          <- apply(combosMat,2,function(x){SNVdistMat[x[1],x[2]]    })
    names(combosDist)   <- 1:length(combosDist)
    colnames(combosMat) <- 1:length(combosDist)
    maxDistSamp <- combosMat[,names(sort(combosDist,decreasing=T))[1]]
  }
})

#foreach CNV select samples in which there is no amplification
notAmpSamps <- apply(geneCNVdf,1,function(x){ names(geneCNVdf)[x<=notAmpThresh] } )

#find not amplified samples within the amplified samples
convEvList <- list()
for (C in names(ampSamps)){
  convEvList[[C]] <- list()
  if(is.null(maxDistSampList[[C]])){next;}
  A=maxDistSampList[[C]][1]
  B=maxDistSampList[[C]][2]
  d1=SNVdistMat[A,B]
  for (X in notAmpSamps[[C]]){
    d2=SNVdistMat[A,X]
    d3=SNVdistMat[X,B]
    if((d2 < d1) && (d3 < d1)){
      #print(paste(C,A,B,X,d1,d2,d3))
      convEvList[[C]][["A"]]=A
      convEvList[[C]][["B"]]=B
      convEvList[[C]][["X"]]=X
      convEvList[[C]]$data <- data.frame(id=treeSNV$tip.label , value=unlist(geneCNVdf[C,treeSNV$tip.label]))
      break
    }
  }
}

#combine convergent genes to a data frame reporting their coverage
convEvGeCovDf <- list()
for (C in names(convEvList)){ 
  if(is.null(convEvList[[C]]$A)){next;}
  convEvGeCovDf[[C]] <- convEvList[[C]][["data"]]$value
}
convEvGeCovDf <- as.data.frame(convEvGeCovDf)
row.names(convEvGeCovDf) <- treeSNV$tip.label

#write
write.xlsx(file=paste0(outName,".xlsx") , x=list(convCNV=geneCNV[names(convEvGeCovDf),c("gene_id","chr","start","end",treeSNV$tip.label,"delta","geneFunction")]) , asTable=TRUE) 

#saturate high(low) coverages
convEvGeCovDf[convEvGeCovDf > covSaturation] = covSaturation

#cluster the convEvGeCovDf by genes
col.order     <- hclust(dist(t(convEvGeCovDf)))$order
convEvGeCovDf <- convEvGeCovDf[,col.order]

#plot
pdf(paste0(outName,".pdf") ,height=plotDim[1],width=plotDim[2])
p  <- ggtree(treeSNV , branch.length=branchLen , layout=layout)
if (! is.na(treeTip)){
  sampleInfo  <- read.xlsx(geCNV,sheet="sampleInfo")[,c("sampleId",treeTip,paste0(treeTip,"_COLOR"))]
  names(sampleInfo) <- c("sample","feature","featureColor") 
  p <- p %<+% sampleInfo + geom_tippoint(aes(color=feature) ) 
  p <- p + scale_color_manual(name=treeTip , values=sampleInfo$featureColor , breaks=sampleInfo$feature  )
}
if(tipLab){
  p <- p + geom_tiplab(offset=.1) + hexpand(hexpand)

}
p <- p + theme_tree2() 

if(! hideHeatmap){
  p <- suppressMessages(gheatmap(p, convEvGeCovDf , legend_title="Normalized\ncoverage" ,  
  	   color = NULL , colnames=FALSE ))
  p <- p + scale_x_ggtree() 
}

if(! hideXlabs){ 
  p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
} else {
  p <- p + theme_void() 
}

 p <- p + theme(legend.title = element_text(face = "bold"))#, size = 8), 
                #legend.text  = element_text(size = 8) , legend.position = "bottom") 


suppressMessages(p <- p + scale_fill_gradientn(name="Normalized\ncoverage", 
	                         colors = heatCols,
	                         limits=c(heatMin,covSaturation)))

print(p)
invisible(dev.off())



