#samples=c("Dog3","Dog1-P2")
#gipOut="gipOut"
#clstrGe=TRUE
#outName=NA
#chrs=NA
#MAPQ=50
#highLowRatio=c(1.5,0.5)
#pseudocount=0.1
#debug=FALSE
#overview_ylim=5
#multi_min=0
#multi_max=100
#multiLog_min=-1
#multiLog_max=3
#scaleFree="yes"

suppressPackageStartupMessages(library("argparse"))
parser <- ArgumentParser(description="Compare gene sequencing coverage in 2 samples")
parser$add_argument("--samples" , nargs="+", required=TRUE, help="Sample names. It determines the plotting order [required]" )
parser$add_argument("--gipOut"  , help="GIP output directory [default %(default)s]" , default="gipOut")
parser$add_argument("--outName" , help="Output name [default %(default)s]" , default="gipOut/sampleComparison/geCNV")
parser$add_argument("--chrs"    , nargs="+" , help="Chromosomes to use. If \"NA\" it uses the same chromsomes as GIP [default %(default)s]" , default="NA")
parser$add_argument("--MAPQ"  , type="integer" , help="Label genes with MAPQ < --MAPQ [default %(default)s]" , default=0)
parser$add_argument("--highLowRatio" , nargs="+" , type="double" , help="Provide 2 numbers. Genes with ratio scores > num1 or < num2 will be colored differently [default %(default)s]" , default= c(1.5,0.5) )
parser$add_argument("--pseudocount" , type="double" , help="Normalized mean coverage pseudocount value preventing infinite (1/0) and NaN (0/0) ratio values [default %(default)s]" , default=0.1)
parser$add_argument("--overview_ylim" , type="double" , help="Overview plot visualization threshold. Ratio values greather than this threshold are shown as --ylim [default %(default)s]" , default=3)
parser$add_argument("--scaleFree"  , help="Graphical parameter multi-panel plots. Set scale free axes [yes|no] [default %(default)s]" , default="yes")
parser$add_argument("--multi_min"  , type="double" , help="Multi-panel plot 1 visualization threshold. Min normalized gene coverage. DEPENDENCY:--scaleFree no [default %(default)s]" , default=0)
parser$add_argument("--multi_max"  , type="double" , help="Multi-panel plot 1 visualization threshold. Max normalized gene coverage. DEPENDENCY:--scaleFree no [default %(default)s]" , default=5)
parser$add_argument("--multiLog_min" , type="double" , help="Multi-panel plot 2 visualization threshold. Min normalized gene coverage (log10 scale). DEPENDENCY:--scaleFree no [default %(default)s]" , default=-1)
parser$add_argument("--multiLog_max" , type="double" , help="Multi-panel plot 2 visualization threshold. Max normalized gene coverage (log10 scale). DEPENDENCY:--scaleFree no [default %(default)s]" , default=3)
parser$add_argument("--debug"  , action="store_true" , help="Dump session and quit" , default=FALSE)
args <- parser$parse_args()
#patch NA
for (n in names(args)){if(args[[n]][1] == "NA"){args[[n]] <- NA}  }
for (n in names(args)){assign(n,args[[n]]) }

suppressPackageStartupMessages(library("ggplot2"))
suppressPackageStartupMessages(library("GenomicRanges"))
suppressPackageStartupMessages(library("openxlsx"))
suppressPackageStartupMessages(library("session"))
if(debug){save.session("session_DEBUG_geCNV");quit()}


#setup
if(! dir.exists(gipOut)){
  stop("ERROR. gipOut directory does not exists")
  quit(save = "no", status = 1, runLast = FALSE)
}
outDir <- paste0(gipOut,"/sampleComparison/")
system(paste0("mkdir -p ", outDir))
s1=samples[1]
s2=samples[2]
chrSel      <- as.character(read.table(paste0(gipOut,"/samples/",s1,"/chrCoverageMedians_",s1),header=T)[,1])
chrSize     <- read.table(paste0(gipOut,"/genome/genome.chrSize"),sep="\t", stringsAsFactors = F, header=F , col.names=c("chr","size"))
chrSize$chr <- as.character(chrSize$chr)
chrSize     <- chrSize[match(chrSel,chrSize$chr),]
if (is.na (chrs[1])){
  chrs <- chrSize$chr
}
chrSize <- chrSize[chrSize$chr %in% chrs,]

#READ
allSamples <- list()
allSamples[[s1]] <- read.delim(paste0(gipOut,"/samples/",s1,"/",s1,".covPerGe.gz") , header=T,stringsAsFactors=F,row.names=1)
allSamples[[s2]] <- read.delim(paste0(gipOut,"/samples/",s2,"/",s2,".covPerGe.gz") , header=T,stringsAsFactors=F,row.names=1)
geFunDf <- read.delim(paste0(gipOut,"/genome/geneFunction.tsv") , sep="\t", stringsAsFactors = F, header=F ,col.names=c("geId","geneFunction"))
repeats <- tryCatch(read.table(paste0(gipOut,"/genome/repeats/genome.out.gff") , sep="\t", stringsAsFactors = F, header=F )[,c(1,4,5)] ,error=function(cond){return(NULL)}) #message(cond);
gaps    <- tryCatch(read.table(paste0(gipOut,"/genome/genome.gaps.gz") , sep="\t", stringsAsFactors = F, header=F),error=function(cond){return(NULL)}) #message(cond);
clstr <- list()
clstr[[s1]] <- tryCatch(read.delim(paste0(gipOut,"/covPerClstr/",s1,".covPerClstr.gz") , header=T,stringsAsFactors=F,row.names=1),error=function(cond){return(NULL)}) #message(cond);
clstr[[s2]] <- tryCatch(read.delim(paste0(gipOut,"/covPerClstr/",s2,".covPerClstr.gz") , header=T,stringsAsFactors=F,row.names=1),error=function(cond){return(NULL)}) #message(cond);
clstrFun <- tryCatch(read.delim(paste0(gipOut,"/covPerClstr/clstrAnnFormat2.tsv") , header=F,stringsAsFactors=F,col.names=c("geId","clstrFunction","clstrId")),error=function(cond){return(NULL)}) #message(cond);


#MAKE DF
makeDf <- function(List){
 #consider just the ids available on the both samples
 ids <- intersect( row.names(List[[1]]) , row.names(List[[2]])  )
 d <- data.frame(
  chromosome = as.character(gsub(x=List[[s1]][ids,]$locus,pattern="^([^\\:]+)\\:.+",replacement="\\1")) , 
  geneStart  = as.numeric(gsub(x=List[[s1]][ids,]$locus,pattern="^([^\\:]+)\\:(\\d+)-(\\d+)$",replacement="\\2")) , 
  geneEnd    = as.numeric(gsub(x=List[[s1]][ids,]$locus,pattern="^([^\\:]+)\\:(\\d+)-(\\d+)$",replacement="\\3")) , 
  covS1 = List[[s1]][ids,"normalizedMeanCoverage"] , 
  covS2 = List[[s2]][ids,"normalizedMeanCoverage"] ,
  log10covS1 = log10(List[[s1]][ids,"normalizedMeanCoverage"]+pseudocount) , 
  log10covS2 = log10(List[[s2]][ids,"normalizedMeanCoverage"]+pseudocount) , 
  ratio = (List[[s2]][ids,"normalizedMeanCoverage"]+pseudocount) /  (List[[s1]][ids,"normalizedMeanCoverage"]+pseudocount) ,
  log10ratio = log10((List[[s2]][ids,"normalizedMeanCoverage"]+pseudocount) / (List[[s1]][ids,"normalizedMeanCoverage"]+pseudocount)) , 
  color = "black" ,
  MAPQ  = pmin(List[[s1]][ids,"MAPQ"] , List[[s2]][ids,"MAPQ"]) , 
  stringsAsFactors=FALSE)
 row.names(d)=ids
 #select chrs and sort by position
 d <- d[d$chromosome %in% chrs,]
 d <- d[with(d, order(chromosome , geneStart)), ]
 #color extreme genes
 d$color[d$ratio > highLowRatio[1]] = "orange"
 d$color[d$ratio < highLowRatio[2]] = "blue"
 d$status <- "background"
 d$status[d$color == "orange"]="amplified"
 d$status[d$color == "blue"]  ="depleted"
 d$status <- factor(d$status,levels=c("amplified","depleted","background","lowMAPQ"))
 #label low MAPQ
 d$color[d$MAPQ < MAPQ] = "gray"
 d$status[d$MAPQ < MAPQ] = "lowMAPQ"
 return(d)
}
df   <- makeDf(allSamples)
dfCl <- tryCatch(makeDf(clstr),error=function(cond){message(cond);return(NULL)})

#PLOT
theme_gip <- function(){     
    theme_bw() %+replace%    
    theme(axis.text.x  = element_text(angle = 90), 
      axis.text.y  = element_text(size = 14) , 
      axis.title   = element_text(size=14,face="bold"),
      legend.title = element_text(face = "bold", size = 14),
      legend.text  = element_text(size = 12))
}
cols=c("background" = "black","amplified" = "#E69F00","depleted" = "#56B4E9" , "lowMAPQ" = "gray")
pdf(paste0(outName,".overview.pdf"))
#PLOT1: cloud plot (all genes)
df$saturatedRatio <- df$ratio
df$saturatedRatio[df$saturatedRatio >= overview_ylim] = overview_ylim
df$index <- 1:length(df[,1])
p <- ggplot(df, aes(x=index, y=saturatedRatio)) 
p <- p + geom_segment(aes(x = 0, y = highLowRatio[1], xend = max(index), yend = highLowRatio[1]), linetype="dashed", color = "red", size=.3)
p <- p + geom_segment(aes(x = 0, y = highLowRatio[2], xend = max(index), yend = highLowRatio[2]), linetype="dashed", color = "red", size=.3)
p <- p + geom_point(size=1.5,aes(colour=status),alpha=.6) + scale_color_manual(values=cols ,name="copy number") 
p <- p + xlab("gene index") + ylab(paste0("sequencing coverage ratio ",s2,"/",s1)) 
p <- p + coord_cartesian(ylim =c(0,overview_ylim)) + scale_x_continuous(labels = function(x) format(x, scientific = FALSE , big.mark = " ")) + theme_gip()
p <- p + theme_gip()
print(p)
df[,c("saturatedRatio","index")] <- list(NULL)
#PLOT2: cloud plot with gene clstr (lowMAPQ is meaningless for clstrs)
if( ! is.null(dfCl) ) {
  dfCl$saturatedRatio <- dfCl$ratio
  dfCl$saturatedRatio[dfCl$saturatedRatio >= overview_ylim] = overview_ylim
  dfCl$index <- 1:length(dfCl[,1])
  p <- ggplot(dfCl, aes(x=index, y=saturatedRatio)) 
  p <- p + geom_segment(aes(x = 0, y = highLowRatio[1], xend = max(index), yend = highLowRatio[1]), linetype="dashed", color = "red", size=.3)
  p <- p + geom_segment(aes(x = 0, y = highLowRatio[2], xend = max(index), yend = highLowRatio[2]), linetype="dashed", color = "red", size=.3)
  p <- p + geom_point(size=2,aes(colour=status),alpha=.7,shape=18) + scale_color_manual(values=cols ,name="copy number") 
  p <- p + xlab("gene cluster index") + ylab(paste0("sequencing coverage ratio ",s2,"/",s1)) 
  p <- p + coord_cartesian(ylim =c(0,overview_ylim)) + scale_x_continuous(labels = function(x) format(x, scientific = FALSE , big.mark = " ")) + theme_gip()
  p <- p + theme_gip()
  print(p)
  dfCl[,c("saturatedRatio","index")] <- list(NULL)
}
invisible(dev.off())

pdf(paste0(outName,".scatter.pdf"))
#PLOT3: scatter plot (all genes, log transformed)
p <- ggplot(df, aes(x=log10covS1, y=log10covS2)) + geom_abline(intercept=0,slope=1,size=0.3,colour="red", linetype="solid")
p <- p + geom_point(size=1.5,aes(colour=status),alpha=.6) + scale_color_manual(values=cols ,name="copy number") 
p <- p + xlab(paste("log10 coverage",s1,"genes")) + ylab(paste("log10 coverage",s2,"genes"))
p <- p + theme_gip() +   theme(axis.text.x  = element_text(angle = 0 , size = 14) , legend.position="bottom")
print(p)
if( ! is.null(dfCl) ) {
#PLOT4: scatter plot (all clstrs, log transformed) (clstrs with log10 > threshold are not shown) (lowMAPQ is meaningless for clstrs)
  p <- ggplot(dfCl, aes(x=log10covS1, y=log10covS2)) + geom_abline(intercept=0,slope=1,size=0.3,colour="red", linetype="solid")
  p <- p + geom_point(size=2,aes(colour=status),alpha=.7,shape=18) + scale_color_manual(values=cols ,name="copy number") 
  p <- p + xlab(paste("log10 coverage",s1,"gene clusters")) + ylab(paste("log10 coverage",s2,"gene clusters"))
  p <- p + theme_gip() + theme(axis.text.x  = element_text(angle = 0 , size = 14) , legend.position="bottom")
  print(p)
  #genes belonging to clstrs may be on multiple chromosomes
  #thus it is not possile to show for the clstrs the equivalent of PLOT5 and PLOT6
}
invisible(dev.off())

pdf(paste0(outName,".multiPanel.pdf"),height=10, width=10)
#PLOT5: one scatterplot per chromosme (genes with coverage > multi_max are excluded, and do not contribute to the legend colorbar)
#df with x and y axes range
chrMax <- sapply(split(df,f=df$chromosome) , function(x) max(c(x$covS1,x$covS2)) )
axesDf <- data.frame(x = numeric(), y = numeric(), chromosome = character())
for (chr in chrSize$chr){
  size <- chrMax[chr] + 1
  axesDf <- rbind(axesDf, data.frame(x = 0    , y = 0, chromosome = chr))
  axesDf <- rbind(axesDf, data.frame(x = size , y = size, chromosome = chr))
}
axesDf$chromosome <- factor(axesDf$chromosome)
p <- ggplot(df, aes(x=covS1, y=covS2)) + geom_abline(intercept=0,slope=1,size=0.3,colour="red", linetype="solid") 
p <- p + geom_point(size=1,aes(colour=status)) + scale_color_manual(values=cols ,name="copy number")
p <- p + geom_blank(data = axesDf, aes(x = x, y = y)) 
p <- p + xlab(paste("coverage",s1)) + ylab(paste("coverage",s2)) 
p <- p + theme_bw() +  theme(axis.text.x  = element_text(angle = 90), 
      axis.title   = element_text(size=14,face="bold"),
      legend.title = element_text(face = "bold", size = 14),
      panel.grid.major = element_line(size=0.6,colour="gray"),
      legend.position="bottom",
      legend.text  = element_text(size = 12))
if(scaleFree == "yes"){
	p <- p + facet_wrap(~ chromosome , scales="free") 
} else {
	p <- p + facet_wrap(~ chromosome) + ylim(multi_min,multi_max) + xlim(multi_min,multi_max)
}
print(p)

#PLOT6: one scatterplot per chromosme (log transformed) (genes with log10 coverage > multiLog_max are not shown, and do not contribute to the legend colorbar)
#df with x and y axes range
chrRange <- as.data.frame(sapply(split(df,f=df$chromosome) , function(x) range(c(x$log10covS1,x$log10covS2)) ))
axesDf <- data.frame(x = numeric(), y = numeric(), chromosome = character())
for (chr in chrSize$chr){
  space <- (chrRange[2,chr] - chrRange[1,chr]) / 5
  mi <- chrRange[1,chr] - space
  ma <- chrRange[2,chr] + space
  axesDf <- rbind(axesDf, data.frame(x = mi , y = mi, chromosome = chr))
  axesDf <- rbind(axesDf, data.frame(x = ma , y = ma, chromosome = chr))
}
axesDf$chromosome <- factor(axesDf$chromosome)
p <- ggplot(df, aes(x=log10covS1, y=log10covS2))  + geom_abline(intercept=0,slope=1,size=0.3,colour="red", linetype="solid")
p <- p + geom_point(size=1,aes(colour=status)) + scale_color_manual(values=cols,name="copy number") 
p <- p + geom_blank(data = axesDf, aes(x = x, y = y)) 
p <- p + xlab(paste("log10 coverage",s1)) + ylab(paste("log10 coverage",s2)) 
p <- p + theme_bw() +  theme(axis.text.x  = element_text(angle = 90), 
      axis.title   = element_text(size=14,face="bold"),
      legend.title = element_text(face = "bold", size = 14),
      panel.grid.major = element_line(size=0.6,colour="gray"),
      legend.position="bottom",
      legend.text  = element_text(size = 12))
if(scaleFree == "yes"){ 
    p <- p + facet_wrap(~ chromosome , scales="free") 
} else {
    p <- p + facet_wrap(~ chromosome)
}
print(p)
invisible(dev.off())


#OUTPUT TABLE
#label overlap with gaps or repeats
addOverlapAnnotations <- function(bed){
  ovAnnotations <- rep("no",length(df[,1]))
  if(is.null(bed)) {
    return(ovAnnotations)
  }
  names(bed) <- c("chr","start","end")
  bed        <- bed[bed$chr %in% df$chromosome,]
  bedGr      <- with(bed, GRanges(chr, IRanges(start, end)))
  genesGr    <- with(df,  GRanges(chromosome, IRanges(geneStart, geneEnd)))
  ov  <- findOverlaps(genesGr,bedGr)
  ovAnnotations[queryHits(ov)]="yes"
  return(ovAnnotations) 
}
df$repeatsOverlap <- addOverlapAnnotations(repeats)
df$gapsOverlap    <- addOverlapAnnotations(gaps)
#rounding-off
is.num     <- sapply(df, is.numeric)
df[is.num] <- lapply(df[is.num], round, 3)
#add gene function
geFunDf$geneFunction[is.na(geFunDf$geneFunction)]="NA"
df$geneFunction <- geFunDf[ match(row.names(df),geFunDf$geId) , "geneFunction"]
#rename
df$geneId <- row.names(df)
names(df)=c("chromosome" , "start" , "end" , paste0("normalizedMeanCoverage_",s1) , paste0("normalizedMeanCoverage_",s2) , paste0("log10_normalizedMeanCoverage_",s1) , paste0("log10_normalizedMeanCoverage_",s2) , paste0("ratio_",s2,"/",s1) , paste0("log10_ratio_",s2,"/",s1) , "color" , "min_MAPQ" , "status" , "repeats_overlap" , "gaps_overlap" , "gene_function" , "gene_id")
df <- df[,c(ncol(df),1:(ncol(df)-1)) ]

#prepare clstr table
if( ! is.null(dfCl) ) {
 is.num      <- sapply(dfCl, is.numeric)
 dfCl[is.num] <- lapply(dfCl[is.num], round, 3)
 dfCl$clstr_id <- row.names(dfCl)
 dfCl <- dfCl[,c(ncol(dfCl),1:(ncol(dfCl)-1)) ]
 #removing featurs that are meaningless for clstrs
 dfCl[,c("chromosome", "geneStart", "geneEnd","MAPQ")] <-list(NULL)
 clstrFunS <- split(clstrFun,f=clstrFun$clstrId)
 clstrFun2 <- t(as.data.frame(sapply(clstrFunS,function(x){list(clstr_members=paste(x$geId,collapse=",") , clstrFunction=paste(unique(x$clstrFunction),collapse=","))}),stringsAsFactors=F))
 dfCl$clstr_members <- clstrFun2[row.names(dfCl),"clstr_members"]
 dfCl$clstrFunction <- clstrFun2[row.names(dfCl),"clstrFunction"]
 names(dfCl) <- c("clstr_id",paste0("normalizedMeanCoverage_",s1) , paste0("normalizedMeanCoverage_",s2) , paste0("log10_normalizedMeanCoverage_",s1) , paste0("log10_normalizedMeanCoverage_",s2) , paste0("ratio_",s2,"/",s1) , paste0("log10_ratio_",s2,"/",s1),"color","status","clstr_members","clstr_function")
 write.xlsx(file=paste0(outName,".xlsx") , x=list(gene_comparison=df,clstr_comparison=dfCl) , asTable=TRUE)
} else{
  write.xlsx(file=paste0(outName,".xlsx") , x=df , asTable=TRUE)
}

