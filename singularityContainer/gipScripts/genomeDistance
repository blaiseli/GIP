#############################################################################
# giptools                                                                  #
#                                                                           #
# Authors: Giovanni Bussotti                                                #
# Copyright (c) 2021  Institut Pasteur                                      #
#                                                                           #
#                                                                           #
# This program is free software: you can redistribute it and/or modify      #
# it under the terms of the GNU General Public License as                   #
# published by the Free Software Foundation, either version 3 of the        #
# License, or (at your option) any later version.                           #
#                                                                           #
# This program is distributed in the hope that it will be useful,           #
# but WITHOUT ANY WARRANTY; without even the implied warranty of            #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             #
# GNU General Public License for more details.                              #
#                                                                           #
# You should have received a copy of the GNU General Public License         #
# along with this program.  If not, see <https://www.gnu.org/licenses/>.    #
#                                                                           #
#############################################################################

suppressPackageStartupMessages(library("argparse"))
parser <- ArgumentParser(description="Compare samples genomic distance")
parser$add_argument("--samples" , nargs="+", help="Sample names. If \"NA\" all samples are used" , default="NA")
parser$add_argument("--gipOut"  , help="GIP output directory [default %(default)s]" , default="gipOut")
parser$add_argument("--outName" , help="Output name [default %(default)s]" , default="gipOut/sampleComparison/genomeDistance")
parser$add_argument("--contextGenomes" , help="Two columns TSV file listing additional genomes. Syntax: name<Tab>filePath [default %(default)s]" , default="NA")
parser$add_argument("--threads"  , type="integer" , help="Number of nucmer threads [default %(default)s]" , default=1)
parser$add_argument("--customColors", help="TSV file with 2 columns named \"SAMPLE\" and \"COLOR\" indicating the color to be used for each sample. If \"NA\" colors are automatically assigned [default %(default)s]", default="NA" )
parser$add_argument("--phylogenyDistance", help="Distance matrix e.g. the phylogeny.treefile.distMat.gz file produced with the phylogeny module. If \"NA\" the ANI distance is measured [default %(default)s]", default="NA" )
parser$add_argument("--PCAlabel", help="Show PCA labels [all|none] [default %(default)s]" , default="all")
parser$add_argument("--debug"  , action="store_true" , help="Dump session and quit" , default=FALSE)
args <- parser$parse_args()

#patch NA
for (n in names(args)){if(args[[n]][1] == "NA"){args[[n]] <- NA}  }
for (n in names(args)){assign(n,args[[n]]) }

suppressPackageStartupMessages(library("openxlsx"))
suppressPackageStartupMessages(library("gtools"))
suppressPackageStartupMessages(library("session"))
suppressPackageStartupMessages(library("FactoMineR"))

options(datatable.fread.input.cmd.message=FALSE)
if(debug){library(session);save.session("session_DEBUG_genomeDistance");quit()}

#setup
if(! dir.exists(gipOut)){
  stop("ERROR. gipOut directory does not exists")
  quit(save = "no", status = 1, runLast = FALSE)
}
if (is.na(samples[1])) {
  samples <- dir(paste0(gipOut,"/samples"))
} 
outDir <- paste0(gipOut,"/sampleComparison/")
system(paste0("mkdir -p ", outDir))
distMat <- NULL

#compute Average Nucleotide Identity (ANI) for all genome pair
if (is.na(phylogenyDistance)) {
 data <- data.frame(name=samples,file=paste0(gipOut,"/samples/",samples,"/",samples,"_freebayesFiltered/pseudoReference.fa.gz"),stringsAsFactors=F)
 if (! is.na(contextGenomes)){
   extraData  <- read.table("contextGenomes",header=F,stringsAsFactors=F,col.names=c("name","file"))
   data <- rbind(data,extraData)
 }
 row.names(data) <- data$name
 contrasts <- as.data.frame(gtools::combinations(n=length(data$name),r=2,data$name),stringsAsFactors=F)
 distMat <- matrix(0L, nrow = length(data$name), ncol = length(data$name))
 colnames(distMat) <- data$name
 rownames(distMat) <- data$name
 for (i in 1:nrow(contrasts)){
   s1=contrasts[i,"V1"]
   s2=contrasts[i,"V2"]
   f1=data[s1,"file"]
   f2=data[s2,"file"]
   u1=paste0("._tmp_",s1)
   u2=paste0("._tmp_",s2)
   dd="._tmp_dnadiff"
   system(paste0("gunzip -c ",f1," > ",u1))
   system(paste0("gunzip -c ",f2," > ",u2))
   cmd <- paste("nucmer --mum --forward --threads ", threads ," --delta .nucOut.delta ", u1 , u2)
   #print(cmd)
   system(cmd , ignore.stdout=TRUE , ignore.stderr=TRUE)
   cmd <- paste("dnadiff -d .nucOut.delta -p " , dd)
   #print(cmd)
   system(cmd , ignore.stdout=TRUE , ignore.stderr=TRUE)
   ani <- as.numeric(system("grep  AvgIdentity ._tmp_dnadiff.report | head -1 | awk '{print $2}'",intern=T))
   distMat[s1,s2] = ani
   distMat[s2,s1] = ani
   distMat[s1,s1] = 100
   distMat[s2,s2] = 100
   system(paste0("rm -rf .nucOut.delta ", u1 , " " , u2 , " " , dd,".1coords " ,  dd,".delta " , dd,".mdelta " , dd,".rdiff " , dd,".snps " , dd,".1delta " , dd,".mcoords " , dd,".qdiff " , dd,".report " ))
 }
} else {
  distMat <- as.matrix(read.table(phylogenyDistance))
  distMat <- distMat[samples,samples]
}

pdf(paste0(outName,".pdf"))
#dendrogram
hcd <- as.dendrogram(hclust(dist(distMat)))
edgePar = list(col = c("steelblue") , lwd=2)
par(lwd=2,font=2, cex=0.9 , mar=c(8,4,4,4))
plot(hcd,  ylab = "", edgePar = edgePar,horiz=FALSE , cex=0.9 , axes=FALSE) 
par(cex.axis=1.5)
axis(2)
mtext("Distance", side = 2, line = 3, outer = FALSE )
#pca
res.pca <- PCA(distMat, graph=FALSE)
if(! is.na(customColors)){
  customColDf  <- read.table(customColors,header=T,stringsAsFactors=F,sep="\t" , comment.char = "")
  if(! all(colnames(distMat) %in% customColDf$SAMPLE)) {
    stop(paste("ERROR. some samples are not included in",customColors))
    quit(save = "no", status = 1, runLast = FALSE)
  }
  pal <- customColDf[match(colnames(distMat) , customColDf$SAMPLE),"COLOR"]
  plot.PCA(res.pca , choix="ind" , habillage="ind" , col.hab=pal , autoLab="auto" , label=PCAlabel )
} else{
  plot.PCA(res.pca , choix="ind" , autoLab="auto" , label=PCAlabel)
}
plot.PCA(res.pca , choix="var" , autoLab="auto" , label=PCAlabel)
invisible(dev.off())

#table
df <- cbind(row.names(distMat), as.data.frame(distMat))
names(df)[1] <- "sample"
write.xlsx(x=list(genomePairANI=df),file=paste0(outName,".xlsx"),asTable=T)





