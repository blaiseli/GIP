#First generate genome coverage files (.covPerBin) 
#Then given a list of gzipped .covPerBin files (--file), convert the bin scores to somy scores which will be used for the boxplots and statistics

#The somy score is defined as the downsampled score (e.g. bin score) divided by the median downsampled score of a chromosome deemed to be disomic and multiplied by 2
#If no disomic chromosome is deemed, the somy score is just the downsampled score multiplied by 2
#To assess what chromosome is disomic you can do a dry run of the script and pick a chromsome that has median cenetered on 2 and does not vary much across the various samples

#To test whether the chromosome coverage varies in different conditions the script runs Wilcoxon, Kolmogorov-Smirnov and AOV tests for each comparison and returns one table for each test.
#it also return the difference between the median  somy score for each chromosome and for each comparison

#To compare coverage distribution shapes the script generates qqplots, comparing the quantiles of the two downsampled distributions. If the dots (quantiles) are on the diagonal, then they distributions have the same shape.

#WARNING: since the coverage vectors of a chromosome in two conditions have the same length, in fact the qqplots is equivalent to sort the two vectors and plot one against the other. So the coordinates x,y of the points are the coverage score in the two conditions (you have as many quantiles as nucleotides, not a fixed quantile interval, like the 25%)

suppressPackageStartupMessages(library("argparse"))
parser <- ArgumentParser(description="Compare chromosome sequencing coverage distributions")
parser$add_argument("--samples" , nargs="+", required=TRUE, help="Sample names. It determines the plotting order [required]" )
parser$add_argument("--gipOut"  , required=TRUE , help="GIP output directory [required]")
parser$add_argument("--outName" , help="Output name. [default %(default)s]" , default="NA")
parser$add_argument("--minMAPQ" , type="integer" , help="Remove bins with MAPQ < --minMAPQ [default %(default)s]" , default=0)
parser$add_argument("--chrs"    , nargs="+" , help="Chromosomes to use. If \"NA\" it uses the same chromsomes as GIP [default %(default)s]" , default="NA")
parser$add_argument("--ylim" , nargs="+" , type="double" , help="Min and max plot y-axis limits [default %(default)s]" , default=c(0,10))
parser$add_argument("--makeQqplots" , action="store_true" , help="Computes Q-Q plots for all chromosomes in all samples combinations" , default=FALSE)
parser$add_argument("--disomicChr"  , help="Normalize by this chromosome [default %(default)s]", default="NA" )
parser$add_argument("--customColors", help="Tab separated file listing samples names (1st column) and associated colors (2nd column). The first two columns must be named \"SAMPLE\" and \"COLOR\" [default %(default)s]", default="NA" )
parser$add_argument("--geom" , help="Select boxplot or violin [default %(default)s]" , default="boxplot")
parser$add_argument("--pooled" , action="store_true" , help="Pool all samples together (i.e. one box per chromosome representing the coverage values of all samples)" , default=FALSE)
parser$add_argument("--debug"  , action="store_true" , help="Dump session and quit" , default=FALSE)
args <- parser$parse_args()
#patch NA
for (n in names(args)){if(args[[n]][1] == "NA"){args[[n]] <- NA}  }
for (n in names(args)){assign(n,args[[n]]) }


#functions
wilcoxonTest <- function (contrasts){
  allPvalsWilcox <- NULL
  for (i in 1:length(contrasts$V1)){ 
    x <- as.character(contrasts[i,])
    contrastPvalsWilcox <- NULL
    for (chr in chrs) {
      #select the score for each chr in the two samples
      a <- subset(allSamples[[x[1]]], allSamples[[x[1]]]$chromosome == chr)$score
      b <- subset(allSamples[[x[2]]], allSamples[[x[2]]]$chromosome == chr)$score
      chrPvalW <- wilcox.test(a,b)$p.value
      contrastPvalsWilcox <- c(contrastPvalsWilcox , chrPvalW)
    }
    #combine contrast wilcox pvals
    contrastPvalsWilcox <- t(as.data.frame(contrastPvalsWilcox))
    row.names(contrastPvalsWilcox) <- paste(x[1],"_VS_",x[2],sep="")
    as.data.frame(rbind(allPvalsWilcox , contrastPvalsWilcox)) -> allPvalsWilcox
  }
  #write wilcox
  names(allPvalsWilcox) <- chrs
  allPvalsWilcox$sample <- row.names(allPvalsWilcox) ; allPvalsWilcox <- allPvalsWilcox[,c("sample",chrs)]
  return(allPvalsWilcox)
}
KSTest <- function (contrasts){
  allPvalsKS <- NULL
  for (i in 1:length(contrasts$V1)){ 
    x <- as.character(contrasts[i,])
    contrastPvalsKS <- NULL
    for (chr in chrs) {
      #select the score for each chr in the two samples
      a <- subset(allSamples[[x[1]]], allSamples[[x[1]]]$chromosome == chr)$score
      b <- subset(allSamples[[x[2]]], allSamples[[x[2]]]$chromosome == chr)$score
      chrPvalK <- ks.test(a,b)$p.value
      contrastPvalsKS     <- c(contrastPvalsKS     , chrPvalK)
    }
    #combine contrast KS pvals
    contrastPvalsKS <- t(as.data.frame(contrastPvalsKS))
    row.names(contrastPvalsKS) <- paste(x[1],"_VS_",x[2],sep="")
    as.data.frame(rbind(allPvalsKS , contrastPvalsKS)) -> allPvalsKS
  }
  #write KS
  names(allPvalsKS) <- chrs
  allPvalsKS$sample <- row.names(allPvalsKS) ; allPvalsKS <- allPvalsKS[,c("sample",chrs)]
  return(allPvalsKS)
}
AOVTest <- function (contrasts){
  allPvalsAOV <- NULL
  for (i in 1:length(contrasts$V1)){ 
    x <- as.character(contrasts[i,])
    contrastPvalsAOV <- NULL
    for (chr in chrs) {
      #select the score for each chr in the two samples
      a <- subset(allSamples[[x[1]]], allSamples[[x[1]]]$chromosome == chr)$score
      b <- subset(allSamples[[x[2]]], allSamples[[x[2]]]$chromosome == chr)$score
      tmpDf    <- data.frame( score=c(a , b) , sample=c(rep("a",length(a))  , rep("b",length(b))) , stringsAsFactors=F )
      chrPvalA <- summary(aov(score ~ sample , tmpDf))[[1]]$Pr[1]
      contrastPvalsAOV    <- c(contrastPvalsAOV    , chrPvalA)
    }
    #combine contrast AOV pvals
    contrastPvalsAOV <- t(as.data.frame(contrastPvalsAOV))
    row.names(contrastPvalsAOV) <- paste(x[1],"_VS_",x[2],sep="")
    as.data.frame(rbind(allPvalsAOV , contrastPvalsAOV)) -> allPvalsAOV
  }
  #write AOV
  names(allPvalsAOV) <- chrs
  allPvalsAOV$sample <- row.names(allPvalsAOV) ; allPvalsAOV <- allPvalsAOV[,c("sample",chrs)]
  return(allPvalsAOV)
}
deltaMedians <- function (contrasts){
  allDeltas <- NULL
  for (i in 1:length(contrasts$V1)){ 
    x <- as.character(contrasts[i,])
    contrastDeltas <- NULL
    for (chr in chrs) {
      #select the score for each chr in the two samples
      a <- subset(allSamples[[x[1]]], allSamples[[x[1]]]$chromosome == chr)$score
      b <- subset(allSamples[[x[2]]], allSamples[[x[2]]]$chromosome == chr)$score
      delta <- median(a) - median(b)
      contrastDeltas    <- c(contrastDeltas    , delta)
    }
    #combine contrast AOV pvals
    contrastDeltas <- t(as.data.frame(contrastDeltas))
    row.names(contrastDeltas) <- paste(x[1],"_VS_",x[2],sep="")
    as.data.frame(rbind(allDeltas , contrastDeltas)) -> allDeltas
  }
  #write AOV
  names(allDeltas) <- chrs
  allDeltas$sample <- row.names(allDeltas) ; allDeltas <- allDeltas[,c("sample",chrs)]
  return(allDeltas)
}
qqplots <- function (contrasts){
  for (i in 1:length(contrasts$V1)){ 
    x <- as.character(contrasts[i,])
    for (chr in chrs) {
      #select the score for each chr in the two samples
      a <- subset(allSamples[[x[1]]], allSamples[[x[1]]]$chromosome == chr)$score
      b <- subset(allSamples[[x[2]]], allSamples[[x[2]]]$chromosome == chr)$score        
      #qqplot
      qqDir=paste0(outName,"_qqplots")
      system(paste0("mkdir -p ",qqDir))
      pdf(paste0(qqDir,"/",x[1],"_VS_",x[2],"_chr",chr,".pdf"))
      q <- qqplot(a,b,xlab=paste("quantiles",x[1]),ylab=paste("quantiles",x[2]),main=paste("qqplot chr",chr))
      abline(1,1)
      fit <- lm(q$y ~ q$x)
      abline(fit,col="red")
      invisible(dev.off())

    }
  }
}

#libraries
suppressPackageStartupMessages(library("data.table"))
suppressPackageStartupMessages(library("ggplot2"))
suppressPackageStartupMessages(library("gtools"))
suppressPackageStartupMessages(library("ggridges"))
suppressPackageStartupMessages(library("openxlsx"))
options(datatable.fread.input.cmd.message=FALSE)
if(debug){library("session"); save.session("session_DEBUG_karyotype");quit()}

#setup
outDir <- paste0(gipOut,"/sampleComparison/")
system(paste0("mkdir -p ", outDir))
if (is.na(outName)){
  outName <- paste0(outDir,"karyotype")
}
if (is.na(ylim[1])){
  ylim = c(0,10)
} else {
  ylim <- as.numeric(ylim)
}
if (is.na (chrs[1])){ 
  chrs <- as.character(read.table(paste0(gipOut,"/samples/",samples[1],"/chrCoverageMedians_",samples[1]),header=T)[,1])
}
#sanity check
if (!is.na(disomicChr) & ! (disomicChr %in% chrs)) {
    stop("ERROR. disomicChr needs to be included in --chrs")
    quit(save = "no", status = 1, runLast = FALSE)  
}

#read .covPerBin files in a list
allSamples <- list()
for (i in 1:length(samples)){
    n = samples[i]
    fName = paste0(gipOut,"/samples/",n,"/",n,".covPerBin.gz")
    allSamples[[n]]    <- fread(cmd=paste("gunzip -c", fName),colClasses=list(character=1))
    medFile = paste0(gipOut,"/samples/",n,"/",n,".karyotype.medianCoverage")
    medianCoverageOfAllBins <- read.table(medFile)$V1
    allSamples[[n]] <- allSamples[[n]][ allSamples[[n]]$MAPQ >= MAPQ , ]
    allSamples[[n]][,c("end","normalizedMeanCoverage","MAPQ")] <- list(NULL)
    names(allSamples[[n]]) <- c("chromosome","position","score") 
    allSamples[[n]]$score <- allSamples[[n]]$score / medianCoverageOfAllBins
    allSamples[[n]] <- allSamples[[n]][allSamples[[n]]$chromosome %in% chrs,] 
    allSamples[[n]]$sample <- n
    #convert score to somy score
    if(!is.na(disomicChr)){
        normFact  <-  median(allSamples[[n]][ allSamples[[n]]$chromosome == disomicChr ,"score"])
        allSamples[[n]]$score <- allSamples[[n]]$score / normFact
    }
    allSamples[[n]]$score <- allSamples[[n]]$score * 2
}

#reformat
AllSamplesDf <- do.call(rbind,allSamples)
AllSamplesDf$sample     <- factor(AllSamplesDf$sample , levels=samples )
AllSamplesDf$chromosome <- factor(AllSamplesDf$chromosome , levels=chrs)

#customColors
if(! is.na(customColors)){
  customColDf  <- read.table(customColors,header=T,stringsAsFactors=F,sep="\t")
  customColVec <- customColDf$COLOR
  names(customColVec) <- customColDf$SAMPLE
  customColVec <- gsub(x=customColVec,pattern="^",replacement="\\#")
}

#plot
pdf(paste(outName,".pdf",sep=""),width=16)
p <-  ggplot(AllSamplesDf, aes(chromosome, score)) 
if (geom == "violin"){
  if (pooled){
    p <- p + geom_violin(fill="lightblue") 
  } else {
    p <- p + geom_violin(aes(fill = sample)) 
  }
} else if (geom == "boxplot") {
  if (pooled){
    p <- p + geom_boxplot(fill="lightblue"   , outlier.shape = NA) 
  } else {
    p <- p + geom_boxplot(aes(fill = sample) , outlier.shape = NA) 
  }
}
p <- p + coord_cartesian(ylim = c(ylim[1],ylim[2]) ) + ylab("somy score") + theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1) , legend.title = element_text(size=13,face="bold") , axis.title = element_text(size=13,face="bold") , panel.grid.major = element_line(size=1))
if(! is.na(customColors)){
  p1 <- p + scale_fill_manual(values=customColVec)
} else {
  p1 <- p + scale_fill_brewer(palette="Dark2")
}
print(p1)

#ridges (pooled data, including all samples)
print( ggplot(AllSamplesDf, aes(x = score, y = chromosome, fill = stat(x))) + geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +   scale_x_continuous(expand = c(0, 0), limits=c(ylim[1],ylim[2])) +  scale_y_discrete(expand = c(0, 0)) + scale_fill_viridis_c(name = "score", option = "C") + theme_ridges(font_size = 13, grid = TRUE) )
invisible(dev.off())

#compare distributions
allTables <- list()
if(length(samples) > 1){
  contrasts <- as.data.frame(combinations(n=length(samples),r=2,samples),stringsAsFactors=F)
  allTables[["wilcoxonTest"]]     <- wilcoxonTest(contrasts)
  allTables[["KSTest"]]           <- KSTest(contrasts)
  allTables[["AOVTest"]]          <- AOVTest(contrasts)
  allTables[["diffMedianChrCov"]] <- deltaMedians(contrasts)
  if (makeQqplots){
    qqplots(contrasts)
  }
}

#table summarizing median scores per chromosome
allMedians <- list()
for (n in names(allSamples)){
    medians <- NULL
    for (chr in chrs) {
        medians <- c(medians , as.numeric(median(subset(allSamples[[n]], allSamples[[n]]$chromosome == chr)$score)))
    }
    names(medians)  <- chrs
    allMedians[[n]] <- medians
}
allMediansDf <- as.data.frame(do.call(rbind,allMedians),stringsAsFactors=F)
newnames <- names(allMediansDf)
allMediansDf$sample <- rownames(allMediansDf)
allTables[["medianChrCoverage"]] <- allMediansDf[,c("sample",newnames)]
write.xlsx(file=paste0(outName,".xlsx") , x=allTables , asTable=TRUE)

