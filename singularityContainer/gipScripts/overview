suppressPackageStartupMessages(library("argparse"))
parser <- ArgumentParser(description="Overview of the sequencing coverage of chromosomes, genomic bins and genes")
parser$add_argument("--samples" , nargs="+", help="Sample names. It determines the plotting order. If \"NA\" all samples are used [default %(default)s]" , default="NA")
parser$add_argument("--gipOut"  , help="GIP output directory [default %(default)s]" , default="gipOut")
parser$add_argument("--outName" , help="Output name [default %(default)s]" , default="gipOut/sampleComparison/overview")
parser$add_argument("--chrs"    , nargs="+" , help="Chromosomes to use. If \"NA\" it uses the same chromsomes as GIP [default %(default)s]" , default="NA")
parser$add_argument("--MAPQ"  , type="integer" , help="Label bins with MAPQ < --MAPQ [default %(default)s]" , default=0)
parser$add_argument("--ploidy"  , type="integer" , help="Genome ploidy. After normalization multiply coverage values by --ploidy [default %(default)s]" , default=2)
parser$add_argument("--highLowCovThresh" , nargs="+" , type="double" , help="Provide two numbers. Bins with normalized coverage values > num1 or < num2 will be labeled. [default %(default)s]" , default= c(1.5,0.5) )
parser$add_argument("--minDelta"  , type="double" , help="Remove genes with normalized coverage delta < --minDelta [default %(default)s]" , default=0)
parser$add_argument("--ylim" , type="double" , help="Plot visualization threshold. Bin or gene normalized coverage values > --ylim are shown as --ylim [default %(default)s]" , default="5")
parser$add_argument("--ylimInt" , help="Bin scatterplot y-axis values interval. If \"NA\" it is automatically assigned [default %(default)s]" , default="NA")
parser$add_argument("--maxGe"  , type="integer" , help="Plot visualization threshold. Max number of genes to show (ordered by delta coverage) [default %(default)s]" , default=10000)
parser$add_argument("--binPlotDim" , nargs="+", type="double", help="Bin coverage plot height and width values [default %(default)s]" , default=c(10,20) )
parser$add_argument("--debug"  , action="store_true" , help="Dump session and quit" , default=FALSE)
args <- parser$parse_args()

#patch NA
for (n in names(args)){if(args[[n]][1] == "NA"){args[[n]] <- NA}  }
for (n in names(args)){assign(n,args[[n]]) }

suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library("openxlsx"))
suppressPackageStartupMessages(library("session"))
suppressPackageStartupMessages(library("ggplot2"))
suppressPackageStartupMessages(library("pheatmap"))
suppressPackageStartupMessages(library("openxlsx"))
options(datatable.fread.input.cmd.message=FALSE)
if(debug){library(session);save.session("session_DEBUG_overview");quit()}

#setup
if(! dir.exists(gipOut)){
  stop("ERROR. gipOut directory does not exists")
  quit(save = "no", status = 1, runLast = FALSE)
}
outDir <- paste0(gipOut,"/sampleComparison/")
system(paste0("mkdir -p ", outDir))
if (is.na(samples[1])) {
  samples <- dir(paste0(gipOut,"/samples"))
} 
chrSel      <- as.character(read.table(paste0(gipOut,"/samples/",samples[1],"/chrCoverageMedians_",samples[1]),header=T)[,1])
chrSize     <- read.table(paste0(gipOut,"/genome/genome.chrSize"),sep="\t", stringsAsFactors = F, header=F , col.names=c("chr","size"))
chrSize$chr <- as.character(chrSize$chr)
chrSize     <- chrSize[match(chrSel,chrSize$chr),]
if (is.na (chrs[1])){
  chrs <- chrSize$chr
}
chrSize <- chrSize[chrSize$chr %in% chrs,]

#read karyotype.medianCoverage
medianCovL <- list()
for (s in samples){
	medianCovL[[s]] <- read.table(paste0(gipOut,"/samples/" , s , "/" , s , ".karyotype.medianCoverage"))$V1
}

###########
#covPerBin#
###########
s1 <- samples[1]
readCovPerBin <- function (s){
  tmp <- fread(data.table=F, cmd=paste0("gunzip -c ", gipOut , "/samples/" , s , "/" , s , ".covPerBin.gz"  ), select=c("chromosome","start","end","meanCoverage","MAPQ"))
  tmp$position <- tmp$start + ( ((tmp$end - tmp$start) +1) /2)
  tmp$sample <- s
  #normalize
  tmp$meanCoverage <- (tmp$meanCoverage / medianCovL[[s]]) * ploidy
  tmp <- tmp[,c("chromosome", "position" ,  "meanCoverage" ,  "MAPQ" , "sample")]
  return(tmp)
}
df <- readCovPerBin(s1)
for (s in samples[-1]){
	df <- rbind(df,readCovPerBin(s))
}
#filter
df <- df[df$chromosome %in% chrs, ]

#color extreme bins
df$color  <- "black"
df$status <- "background"
df$color[df$meanCoverage > highLowCovThresh[1]]  = "orange"
df$color[df$meanCoverage < highLowCovThresh[2]]  = "blue"
df$status[df$meanCoverage > highLowCovThresh[1]] = "amplified"
df$status[df$meanCoverage < highLowCovThresh[2]] = "depleted"
df[df$MAPQ < MAPQ , "status"] = "lowMAPQ"
df[df$MAPQ < MAPQ , "color"]  = "gray"

#saturate
df$meanCoverage[df$meanCoverage > ylim] = ylim

#plot 
theme_gip <- function(){     
    theme_bw() %+replace%    
    theme(axis.text.x  = element_text(angle = 90), 
      axis.text.y  = element_text(size = 12) , 
      axis.title   = element_text(size=14,face="bold"),
      legend.title = element_text(face = "bold", size = 14),
      legend.text  = element_text(size = 12))
}
#plot faceting
#df with x and y axes range
axesDf <- data.frame(x = numeric(), y = numeric(), chromosome = character())
for (chr in chrSize$chr){
  size <- chrSize[ match(chr , chrSize$chr) , "size" ]
  axesDf <- rbind(axesDf, data.frame(x = 0    , y = 0, chromosome = chr))
  axesDf <- rbind(axesDf, data.frame(x = size , y = ylim, chromosome = chr))
}
axesDf$chromosome <- factor(axesDf$chromosome)

pdf(paste0(outName,".binCov.pdf"),height=binPlotDim[1], width=binPlotDim[2])
df$sample <- factor(df$sample,levels=samples)
df$chromosome <- factor(df$chromosome,levels=chrs)
#chrSize$chromosome <- factor(chrSize$chr)
p <- ggplot(df, aes(position,meanCoverage))  
#p <- p + geom_segment(aes(x = 0, y = highLowCovThresh[1], xend = size, yend = highLowCovThresh[1]), linetype="dashed", color = "red", size=.3, data=chrSize)
#p <- p + geom_segment(aes(x = 0, y = highLowCovThresh[2], xend = size, yend = highLowCovThresh[2]), linetype="dashed", color = "red", size=.3, data=chrSize)
p <- p + geom_point(size=0.5,alpha=0.5,aes(colour=status)) 
p <- p + geom_blank(data = axesDf, aes(x = x, y = y))
p <- p + facet_grid( sample ~ chromosome , scales="free") + xlab("genomic bin position") 
p <- p + ylab("genomic bin sequencing coverage") + scale_x_continuous(labels = function(x) format(x, scientific = FALSE , big.mark = " "))
p <- p + scale_colour_manual(values = c("background" = "black","amplified" = "orange","depleted" = "blue","lowMAPQ" = "gray"),name="copy number")
if (! is.na (ylimInt)){
  p <- p + scale_y_continuous(limits = c(0, ylim), breaks = seq(0, ylim, by = as.numeric(ylimInt)))
}
p <- p + theme_gip()
print(p)
invisible(dev.off())


###########
#karyotype#
###########
chrCovL <- list()
for (s in samples){
   chrCovL[[s]] <- read.table(paste0(gipOut,"/samples/" , s , "/chrCoverageMedians_" , s ),header=T,stringsAsFactors=F)[,c("CHR", "MEDIANCOV")]
   #normalize
   chrCovL[[s]]$MEDIANCOV <- (chrCovL[[s]]$MEDIANCOV / medianCovL[[s]]) * ploidy
   names(chrCovL[[s]]) <- c("CHR",s)
}
chrCovDf <- Reduce(function(...) merge(..., by="CHR" ,all=T , sort=F), chrCovL)
row.names(chrCovDf) <- chrCovDf$CHR
chrCovDf$CHR <- NULL
#filter
chrCovDf <- chrCovDf[chrs,]
pdf(paste0(outName,".chrCov.pdf")) 
pheatmap(chrCovDf)
invisible(dev.off())


#######
#genes#
#######
#read s1
geDf <- fread(data.table=F, cmd=paste0("gunzip -c ", gipOut , "/samples/" , s1 , "/" , s1 , ".covPerGe.gz") , colClasses=list(character=1))
geDf$chromosome   <- gsub(x=geDf$locus,pattern="(.+):(.+)-(.+)$",replacement="\\1")
geDf$start <- as.numeric(gsub(x=geDf$locus,pattern="(.+):(.+)-(.+)$",replacement="\\2"))
geDf$end   <- as.numeric(gsub(x=geDf$locus,pattern="(.+):(.+)-(.+)$",replacement="\\3"))
#filter
geDf <- geDf[geDf$chr %in% chrs,]
#normalize
geDf$meanCoverage <- (geDf$meanCoverage / medianCovL[[s1]]) * ploidy
geDf <- geDf[,c("gene_id","chromosome","start","end","meanCoverage")]
names(geDf)<-c("gene_id","chromosome","start","end",s1)
#read the other samples
for (s in samples[-1]){
   tmp <- fread(data.table=F, cmd=paste0("gunzip -c ", gipOut , "/samples/" , s , "/" , s , ".covPerGe.gz") , colClasses=list(character=1)) [,c("gene_id" , "meanCoverage" )]
   #normalize
   tmp$meanCoverage <- (tmp$meanCoverage / medianCovL[[s]]) * ploidy
   names(tmp) <- c("gene_id",s)
   geDf <- merge(x=geDf,y=tmp,by="gene_id")
}

#filter
geDf$delta <- apply( geDf[,samples] , 1 , function(x){d=max(x)-min(x)} )
geDf <- geDf[ geDf$delta >= minDelta , ]

#sort and write
geFunDf <- read.delim(paste0(gipOut,"/genome/geneFunction.tsv") , sep="\t", stringsAsFactors = F, header=F ,col.names=c("gene_id","geneFunction"))
geDf <- merge(geDf,geFunDf,by="gene_id")
geDf <- geDf[with(geDf, order(-delta)), ]
write.xlsx(file=paste0(outName,".geCov.xlsx") , x=geDf , asTable=TRUE )

#filter
maxGe <- min(maxGe,length(geDf[,1]))
geDf <- geDf[1:maxGe,]

pdf(paste0(outName,".geCov.pdf")) 
#scaled
pheatmap(geDf[,samples] , scale="row" , show_rownames = F)
#saturated
geDf[,samples][geDf[,samples] > ylim]=ylim
pheatmap(geDf[,samples] , show_rownames = F)
invisible(dev.off())













