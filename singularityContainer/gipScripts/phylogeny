
suppressPackageStartupMessages(library("argparse"))
parser<- ArgumentParser(description= "Extract the SNVs union and infer the phylogenetic tree")
parser$add_argument("--samples" , nargs="+", help="Sample names. If \"NA\" all samples are used" , default="NA")
parser$add_argument("--gipOut"  , help="GIP output directory [default %(default)s]" , default="gipOut")
parser$add_argument("--outName" , help="Output name [default %(default)s]" , default="gipOut/sampleComparison/phylogeny")
parser$add_argument("--VRFcutoff" , nargs="+" , type="double" , help="Provide 2 numbers. For each sample, heterozygous SNVs where NUM2 <= VRF < NUM are labeled with the IUPAC ambiguous notation. SNVs with VRF < NUM2 are removed [default %(default)s]" , default=c(0.70,0.10))
parser$add_argument("--regionsGtf"         , help="Select just the SNVs present in regions specified in this GTF file (e.g. genes). If \"NA\" nor region filter is applied [default %(default)s]" , default="NA")
parser$add_argument("--iqtreeOpts" , help="IQ-tree options [default %(default)s]" , default="--alrt 1000 -B 1000 -T 1 -quiet")
parser$add_argument("--debug"  , action="store_true" , help="Dump session and quit" , default=FALSE)
args <- parser$parse_args()
for (n in names(args)){if(args[[n]][1] == "NA"){args[[n]] <- NA}  }
for (n in names(args)){assign(n,args[[n]]) }

suppressPackageStartupMessages(library("VariantAnnotation"))
suppressPackageStartupMessages(library("GenomicRanges"))
if(debug){library(session); save.session("session_phylogeny");quit()}

#setup
if(! dir.exists(gipOut)){
  stop("ERROR. gipOut directory does not exists")
  quit(save = "no", status = 1, runLast = FALSE)
}
if (is.na(samples[1])) {
  samples <- dir(paste0(gipOut,"/samples"))
} 
outDir <- paste0(gipOut,"/sampleComparison/")
system(paste0("mkdir -p ", outDir))
ambiguousCode <- data.frame(option1=c("AT","CG","AC","GT","AG","CT") , 
	                        option2=c("TA","GC","CA","TG","GA","TC") , 
	                        code=c("W","S","M","K","R","Y") ,stringsAsFactors=F)

#read
allDfs <- list()
for (n in samples){
	f = paste0( gipOut , "/samples/",n,"/",n,"_freebayesFiltered/singleVariants.vcf.gz") 
	vcf <- readVcf(f,"fakePlaceHolder")
	howmanyalleles <- elementNROWS(alt(vcf))
	vcf            <- vcf[howmanyalleles==1]
	allDfs[[n]] <- data.frame(tag=paste0(seqnames(vcf),"_",start(vcf)) , REF=ref(vcf) , ALT=as.vector(unlist(alt(vcf)))  , stringsAsFactors=F)
	names(allDfs[[n]]) <- c("tag" , paste0("REF_",n) , paste0("ALT_",n) )

	#give the ambiguity code to het SNVs
	VRF <- unlist(geno(vcf)$AO)/ (unlist(geno(vcf)$RO) + unlist(geno(vcf)$AO))
	ambiguousInd <- which(VRF < VRFcutoff[1] & VRF >= VRFcutoff[2])
	refAlt       <- paste0(allDfs[[n]][,grepl(x=names(allDfs[[n]]),pattern="REF_")]  ,  allDfs[[n]][,grepl(x=names(allDfs[[n]]),pattern="ALT_")])
	m1  <- match(refAlt,ambiguousCode$option1)
	m2  <- match(refAlt,ambiguousCode$option2)
	m1[is.na(m1)] <- m2[!is.na(m2)]
	refAltAmbCode <- ambiguousCode[m1,"code"]
	allDfs[[n]][ambiguousInd  ,  names(allDfs[[n]])[grepl(x=names(allDfs[[n]]),pattern="ALT_")] ] = refAltAmbCode[ambiguousInd]

    #filter low frequency SNVs
    allDfs[[n]] <- allDfs[[n]][ ! VRF < VRFcutoff[2] ,]
}
#merge. A SNV can be present in a sample but filtered in another. These will be in df as NA scores
df      <- Reduce(function(...) merge(..., by="tag" ,all=T , sort=F , all.x=TRUE , all.y=TRUE), allDfs) 
#find reference nt for each SNV position
refDf   <- df[,grepl(pattern="REF_",x=names(df))]
df$reference <- apply(refDf,1,function(x){x[!is.na(x)][1]})
#replace NA ALTs with the reference nt
for(X in names(df)[grepl(pattern="ALT_",x=names(df))]) {
	ind <- which( is.na( df[[X]] ) )
	df[ ind , X] <- df[ind, "reference"]
}
#sort df (not needed, but I prefer that the SNVs are sorted by chr and position)
df$chr <- gsub(x=df$tag,pattern="([^_]+)_([^_]+)",replacement="\\1")
df$position <- as.numeric(gsub(x=df$tag,pattern="([^_]+)_([^_]+)",replacement="\\2"))
df <- df[with(df, order(chr,position)), ]

#select regions
if (! is.na(regionsGtf)){
    grDf <- makeGRangesFromDataFrame(df , seqnames.field="chr" , start.field="position" , end.field="position" , keep.extra.columns=FALSE)
    regions <- read.table(regionsGtf,header=F,stringsAsFactors=F,sep="\t")[,c(1,4,5)]
    names(regions) <- c("chr","start","end")
    grRegions <- makeGRangesFromDataFrame(regions , seqnames.field="chr" , start.field="start" , end.field="end" , keep.extra.columns=FALSE)
    inter <- as.data.frame(GenomicRanges::intersect(grDf,grRegions))[,c("seqnames","start")]
    inter <- paste(inter$seqnames , inter$start , sep="_")
    df<- df[df$tag %in% inter,]
}

#print union SNVs
printFasta <- function (d){
	system(paste("rm -rf",outName))
	for (n in samples){
		write(paste0(">",n) , file=outName , append=T)
		write(paste(d[[paste0("ALT_",n)]],collapse="") , file=outName , append=T)
	}
	write(paste0(">reference") , file=outName , append=T)
	write(paste(d[["reference"]],collapse="") , file=outName , append=T)
	system(paste0("fold -w 100 -s ", outName , "> ", outName,".tmp ; mv ", outName,".tmp ", outName))
}
printFasta(df)

#IQtree
cmd = paste("iqtree2 -s",outName , iqtreeOpts) 
system(cmd)

#tree to distance matrix
cmd = paste0("treeToDist " , outName, ".treefile > " , outName , ".treefile.distMat" ) 
system(cmd)
system(paste0("gzip ",outName,".treefile.distMat"))
if( file.exists(paste0(outName,".contree")) ){
  cmd = paste0("treeToDist " , outName, ".contree > " , outName , ".contree.distMat" ) 
  system(cmd)
  system(paste0("gzip ",outName,".contree.distMat"))
}



