#samples=c("Dog3","Dog1-P2","DogX")
#gipOut="gipOut"
#outName=NA
#chrs=NA
#MAPQ=50
#highLowDensityColor=c("black","gray")
#debug=FALSE
#pseudocount=0.1
#densityN=200
#densityBin=10
#showSubset=100

suppressPackageStartupMessages(library("argparse"))
parser <- ArgumentParser(description="Compare bin sequencing coverage in 3 samples")
parser$add_argument("--samples" , nargs="+", required=TRUE, help="Sample names. It determines the plotting order [required" )
parser$add_argument("--gipOut"  , required=TRUE , help="GIP output directory [required]")
parser$add_argument("--outName" , help="Output name [default %(default)s]" , default="NA")
parser$add_argument("--chrs"    , nargs="+" , help="Chromosomes to use. If \"NA\" it uses the same chromsomes as GIP [default %(default)s]" , default="NA")
parser$add_argument("--MAPQ"  , type="integer" , help="Remove bins with MAPQ < --MAPQ [default %(default)s]" , default=0)
parser$add_argument("--pseudocount" , type="double" , help="Normalized mean coverage pseudocount value (for ternary plot only) [default %(default)s]" , default=0.1)
parser$add_argument("--highLowDensityColor" , nargs="+", help="Colors for high and low density [default %(default)s]", default=c("black" , "gray"))
parser$add_argument("--densityN"   , type="integer" , help="Number of grid points in each direction [default %(default)s]" , default=200)
parser$add_argument("--densityBin" , type="integer" , help="Number bins over which to calculate intervals [default %(default)s]" , default=10)
parser$add_argument("--showSubset" , type="integer" , help="Show a random subset of genomic bins. Does not affect the density estimation [default %(default)s]", default=5000)
parser$add_argument("--debug"  , action="store_true" , help="Dump session and quit [default %(default)s]" , default=FALSE)
args <- parser$parse_args()
#patch NA
for (n in names(args)){if(args[[n]][1] == "NA"){args[[n]] <- NA}  }
for (n in names(args)){assign(n,args[[n]]) }

suppressPackageStartupMessages(library("ggtern"))
suppressPackageStartupMessages(library("openxlsx"))
suppressPackageStartupMessages(library("session"))
suppressPackageStartupMessages(library("data.table"))
if(debug){save.session("session_DEBUG_ternaryBin");quit()}

#setup
outDir <- paste0(gipOut,"/sampleComparison/")
system(paste0("mkdir -p ", outDir))
if (is.na(outName)){
  outName <- paste0(outDir,"ternaryBin")
}
s1=samples[1]
s2=samples[2]
s3=samples[3]
if (is.na (chrs[1])){ 
  chrs <- as.character(read.table(paste0(gipOut,"/samples/",s1,"/chrCoverageMedians_",s1),header=T)[,1])
}


###################
#read and reformat#
###################
readSample <- function(id) {
#read covPerBins
df  <- fread(cmd=paste0("gunzip -c ", gipOut , "/samples/",id,"/",id,".covPerBin.gz"), stringsAsFactors=FALSE , header=T)
names(df) <- c("chromosome","start","end","meanCoverage","normalizedMeanCoverage","MAPQ")
df      <- as.data.frame(df , stringsAsFactors = FALSE)
row.names(df) <- paste(df$chromosome, df$start, df$end , sep="_")
df$chromosome <- as.character(df$chromosome)

#filter CHR
df <- df[df$chromosome %in% chrs, ]

#reformat
newDf<-NULL
for (chr in chrs){rbind(newDf,df[df$chromosome == chr,]) -> newDf};
df <- newDf
df$meanCoverage <- NULL

#pseudocount
df$normalizedMeanCoverage <- df$normalizedMeanCoverage + pseudocount
return(df)
}
sampDf <- list()
sampDf[[ s1 ]] <- readSample(s1)
sampDf[[ s2 ]] <- readSample(s2)
sampDf[[ s3 ]] <- readSample(s3)

#MAKE DF
df <- data.frame(
  chromosome= sampDf[[s1]]$chromosome , 
  start     = sampDf[[s1]]$start , 
  end       = sampDf[[s1]]$end , 
  covS1     = sampDf[[s1]]$normalizedMeanCoverage , 
  covS2     = sampDf[[s2]][row.names(sampDf[[s1]]),"normalizedMeanCoverage"] , 
  covS3     = sampDf[[s3]][row.names(sampDf[[s1]]),"normalizedMeanCoverage"] , 
  min_MAPQ  = pmin(sampDf[[s1]]$MAPQ , sampDf[[s2]][row.names(sampDf[[s1]]),"MAPQ"] , sampDf[[s3]][row.names(sampDf[[s1]]),"MAPQ"]),
  stringsAsFactors=FALSE)

#filter MAPQ
df <- df[ df$min_MAPQ >= MAPQ , ]


#df$covS1 <- runif(1757)
#df$covS2 <- runif(1757) * 2
#df$covS3 <- runif(1757) * 4

#subset points
if (showSubset > length(df[,1])) {
  showSubset <- length(df[,1])
}
set.seed(123)
dfS <- df [ sample(x=1:length(df[,1]) , size=showSubset ) , ]

#PLOT
#triangle
pdf(paste0(outName,".pdf"))
p <- ggtern(df, aes(covS1,covS2,covS3)) 
p <- p + stat_density_tern(geom='polygon' , n=densityN , bins=densityBin , aes(fill=..level.. , alpha=..level..) , bdl = 0.001, bdl.val = 0)
p <- p + scale_color_gradient(low = highLowDensityColor[2], high = highLowDensityColor[1])   
p <- p + geom_density_tern(aes(color=..level.. ), bins=densityBin , n=densityN ,bdl = 0.001, bdl.val = 0) 
p <- p + scale_fill_gradient(low = highLowDensityColor[2], high = highLowDensityColor[1])   
p <- p + geom_point(data = dfS, size=0.3)
p <- p + guides(alpha = "none") #+ guides(color = "none", fill = "none")
p <- p + theme_rgbw() + labs(x=s1,y=s2,z=s3) 
print(p)
invisible(dev.off())

#OUTPUT TABLE
#remove pseudocount
df$covS1 <- df$covS1 - pseudocount 
df$covS2 <- df$covS2 - pseudocount 
df$covS3 <- df$covS3 - pseudocount 
#rounding-off
df$covS1 <- round(df$covS1,3)
df$covS2 <- round(df$covS2,3)
df$covS3 <- round(df$covS3,3)
#add fold change and delta
df$delta       <- apply(df[,c("covS1","covS2","covS3")],1,function(x){max(x)-min(x)})
df$foldChange  <- apply(df[,c("covS1","covS2","covS3")],1,function(x){max(x)/min(x)})
#rename
names(df) <- c("chromosome" , "start" , "end" , paste0("normalizedMeanBinCoverage_",s1) , paste0("normalizedMeanBinCoverage_",s2) ,  paste0("normalizedMeanBinCoverage_",s3) ,  "min_MAPQ" , "delta_coverage" , "fold_change")
write.xlsx(file=paste0(outName,".xlsx") , x=df , asTable=TRUE)






